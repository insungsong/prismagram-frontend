{"ast":null,"code":"var _jsxFileName = \"/Users/insungsong/Documents/prismagram-frontend/src/Routes/Auth/AuthCotainer.js\";\nimport React, { useState } from \"react\";\nimport AuthPresenter from \"./AutherPresenter\";\nimport useInput from \"../../Hooks/useInput\";\nimport { useMutation } from \"react-apollo-hooks\";\nimport { LOG_IN, CREATE_ACCOUNT, CONFIRM_SECRET, LOCAL_LOG_IN } from \"./AuthQueries\";\nimport { toast } from \"react-toastify\";\nexport default (() => {\n  const [action, setAction] = useState(\"logIn\"); //Hooks\n\n  const username = useInput(\"\");\n  const firstName = useInput(\"\");\n  const lastName = useInput(\"\");\n  const secret = useInput(\"\");\n  const email = useInput(\"\");\n  const [requestSecretMutation] = useMutation(LOG_IN, {\n    variables: {\n      email: email.value\n    }\n  });\n  const [createAccountMutaion] = useMutation(CREATE_ACCOUNT, {\n    variables: {\n      email: email.value,\n      username: username.value,\n      firstName: firstName.value,\n      lastName: lastName.value\n    }\n  });\n  const [confirmSecretMutation] = useMutation(CONFIRM_SECRET, {\n    variables: {\n      email: email.value,\n      secret: secret.value\n    }\n  });\n  const [localLogInMutation] = useMutation(LOCAL_LOG_IN);\n\n  const onSubmit = async event => {\n    event.preventDefault();\n\n    if (action === \"logIn\") {\n      if (email.value !== \"\") {\n        try {\n          const {\n            data: {\n              requestSecret\n            }\n          } = await requestSecretMutation();\n\n          if (!requestSecret) {\n            toast.error(\"해당 하는 계정이 없습니다 계정을 등록하세요!\");\n            setTimeout(() => setAction(\"signUp\"), 3000);\n          } else {\n            toast.success(\"당신의 로그인 이메일을 확인해주세요\");\n            setAction(\"confirm\");\n          }\n        } catch {\n          toast.error(\"요청을 보낼수 없습니다. 다시 시도해주세요.\");\n        }\n      } else {\n        toast.error(\"해당 메일은 존재하지 않는 계정입니다.\");\n      }\n    } else if (action === \"signUp\") {\n      if (email.value !== \"\" && username.value !== \"\" && firstName.value !== \"\" && lastName.value !== \"\") {\n        try {\n          const {\n            data: {\n              createAccount\n            }\n          } = await createAccountMutaion();\n\n          if (!createAccount) {\n            toast.error(\"계정을 생성할 수 없습니다.\");\n          } else {\n            toast.success(\"계정을 성공적으로 생성하셨습니다!\");\n            setTimeout(() => setAction(\"logIn\"), 3000);\n          }\n        } catch (e) {\n          toast.error(e.message);\n        }\n      } else {\n        toast.error(\"모든 항목의 기입이 필요합니다.\");\n      }\n    } else if (action === \"confirm\") {\n      if (secret.value !== \"\") {\n        try {\n          const {\n            data: {\n              confirmSecret: token\n            }\n          } = await confirmSecretMutation();\n\n          if (token !== \"\" && token !== undefined) {\n            localLogInMutation({\n              variables: {\n                token\n              }\n            });\n          } //TO DO\n\n        } catch {\n          toast.error(\"secretcode와 연결할 수 없습니다.\");\n        }\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(AuthPresenter, {\n    setAction: setAction,\n    action: action,\n    username: username,\n    firstName: firstName,\n    lastName: lastName,\n    email: email,\n    secret: secret,\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  });\n});","map":{"version":3,"sources":["/Users/insungsong/Documents/prismagram-frontend/src/Routes/Auth/AuthCotainer.js"],"names":["React","useState","AuthPresenter","useInput","useMutation","LOG_IN","CREATE_ACCOUNT","CONFIRM_SECRET","LOCAL_LOG_IN","toast","action","setAction","username","firstName","lastName","secret","email","requestSecretMutation","variables","value","createAccountMutaion","confirmSecretMutation","localLogInMutation","onSubmit","event","preventDefault","data","requestSecret","error","setTimeout","success","createAccount","e","message","confirmSecret","token","undefined"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport AuthPresenter from \"./AutherPresenter\";\nimport useInput from \"../../Hooks/useInput\";\nimport { useMutation } from \"react-apollo-hooks\";\nimport {\n  LOG_IN,\n  CREATE_ACCOUNT,\n  CONFIRM_SECRET,\n  LOCAL_LOG_IN\n} from \"./AuthQueries\";\nimport { toast } from \"react-toastify\";\n\nexport default () => {\n  const [action, setAction] = useState(\"logIn\"); //Hooks\n  const username = useInput(\"\");\n  const firstName = useInput(\"\");\n  const lastName = useInput(\"\");\n  const secret = useInput(\"\");\n  const email = useInput(\"\");\n  const [requestSecretMutation] = useMutation(LOG_IN, {\n    variables: { email: email.value }\n  });\n\n  const [createAccountMutaion] = useMutation(CREATE_ACCOUNT, {\n    variables: {\n      email: email.value,\n      username: username.value,\n      firstName: firstName.value,\n      lastName: lastName.value\n    }\n  });\n\n  const [confirmSecretMutation] = useMutation(CONFIRM_SECRET, {\n    variables: {\n      email: email.value,\n      secret: secret.value\n    }\n  });\n\n  const [localLogInMutation] = useMutation(LOCAL_LOG_IN);\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    if (action === \"logIn\") {\n      if (email.value !== \"\") {\n        try {\n          const {\n            data: { requestSecret }\n          } = await requestSecretMutation();\n          if (!requestSecret) {\n            toast.error(\"해당 하는 계정이 없습니다 계정을 등록하세요!\");\n            setTimeout(() => setAction(\"signUp\"), 3000);\n          } else {\n            toast.success(\"당신의 로그인 이메일을 확인해주세요\");\n            setAction(\"confirm\");\n          }\n        } catch {\n          toast.error(\"요청을 보낼수 없습니다. 다시 시도해주세요.\");\n        }\n      } else {\n        toast.error(\"해당 메일은 존재하지 않는 계정입니다.\");\n      }\n    } else if (action === \"signUp\") {\n      if (\n        email.value !== \"\" &&\n        username.value !== \"\" &&\n        firstName.value !== \"\" &&\n        lastName.value !== \"\"\n      ) {\n        try {\n          const {\n            data: { createAccount }\n          } = await createAccountMutaion();\n          if (!createAccount) {\n            toast.error(\"계정을 생성할 수 없습니다.\");\n          } else {\n            toast.success(\"계정을 성공적으로 생성하셨습니다!\");\n            setTimeout(() => setAction(\"logIn\"), 3000);\n          }\n        } catch (e) {\n          toast.error(e.message);\n        }\n      } else {\n        toast.error(\"모든 항목의 기입이 필요합니다.\");\n      }\n    } else if (action === \"confirm\") {\n      if (secret.value !== \"\") {\n        try {\n          const {\n            data: { confirmSecret: token }\n          } = await confirmSecretMutation();\n          if (token !== \"\" && token !== undefined) {\n            localLogInMutation({ variables: { token } });\n          }\n          //TO DO\n        } catch {\n          toast.error(\"secretcode와 연결할 수 없습니다.\");\n        }\n      }\n    }\n  };\n\n  return (\n    <AuthPresenter\n      setAction={setAction}\n      action={action}\n      username={username}\n      firstName={firstName}\n      lastName={lastName}\n      email={email}\n      secret={secret}\n      onSubmit={onSubmit}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}