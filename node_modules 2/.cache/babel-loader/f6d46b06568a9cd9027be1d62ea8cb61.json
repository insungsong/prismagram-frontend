{"ast":null,"code":"var _jsxFileName = \"/Users/insungsong/Documents/prismagram-frontend/src/Routes/Search/SearchContainer.js\";\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport SearchPresenter from \"./SearchPresenter\";\nimport { useQuery } from \"react-apollo-hooks\";\nimport { SEARCH } from \"./SearchQueries\";\nexport default withRouter(({\n  location: {\n    search\n  }\n}) => {\n  const searchTerm = search.split(\"=\")[1];\n  const {\n    data,\n    loading\n  } = useQuery(SEARCH);\n  console.log(\"Data:\", data, \"loading:\", loading);\n  console.log(searchTerm);\n  return /*#__PURE__*/React.createElement(SearchPresenter, {\n    searchTerm: searchTerm,\n    loading: loading,\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  });\n});","map":{"version":3,"sources":["/Users/insungsong/Documents/prismagram-frontend/src/Routes/Search/SearchContainer.js"],"names":["React","withRouter","SearchPresenter","useQuery","SEARCH","location","search","searchTerm","split","data","loading","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AAEA,eAAeH,UAAU,CAAC,CAAC;AAAEI,EAAAA,QAAQ,EAAE;AAAEC,IAAAA;AAAF;AAAZ,CAAD,KAA8B;AACtD,QAAMC,UAAU,GAAGD,MAAM,CAACE,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAnB;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBP,QAAQ,CAACC,MAAD,CAAlC;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,IAArB,EAA2B,UAA3B,EAAuCC,OAAvC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ;AACA,sBACE,oBAAC,eAAD;AAAiB,IAAA,UAAU,EAAEA,UAA7B;AAAyC,IAAA,OAAO,EAAEG,OAAlD;AAA2D,IAAA,IAAI,EAAED,IAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGD,CARwB,CAAzB","sourcesContent":["import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport SearchPresenter from \"./SearchPresenter\";\nimport { useQuery } from \"react-apollo-hooks\";\nimport { SEARCH } from \"./SearchQueries\";\n\nexport default withRouter(({ location: { search } }) => {\n  const searchTerm = search.split(\"=\")[1];\n  const { data, loading } = useQuery(SEARCH);\n  console.log(\"Data:\", data, \"loading:\", loading);\n  console.log(searchTerm);\n  return (\n    <SearchPresenter searchTerm={searchTerm} loading={loading} data={data} />\n  );\n});\n"]},"metadata":{},"sourceType":"module"}