{"ast":null,"code":"var _jsxFileName = \"/Users/insungsong/Documents/prismagram-frontend/src/Components/Post/PostContainer.js\";\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport useInput from \"../../Hooks/useInput\";\nimport PostPresenter from \"./PostPresenter\";\nimport { useMutation, useQuery } from \"react-apollo-hooks\";\nimport { TOGGLE_LIKE, ADD_COMMENT, DELETE_COMMENT } from \"./PostQuerise\";\nimport { ME } from \"../../SharedQuerise\";\nimport { toast } from \"react-toastify\";\nimport useCheckingId from \"../../Hooks/useCheckingId\";\nexport const PostContainer = ({\n  id,\n  user,\n  files,\n  likeCount,\n  isLiked,\n  comments,\n  createdAt,\n  caption,\n  location\n}) => {\n  const [isLikedS, setIsLiked] = useState(isLiked);\n  const [likeCountS, setLikeCount] = useState(likeCount);\n  const [currentItem, setCurrentItem] = useState(0);\n  const [selfComments, setSelfComments] = useState([]);\n  const comment = useInput(\"\");\n  const commentId = useCheckingId(\"\");\n  const {\n    data: meQuery\n  } = useQuery(ME);\n  const [toggleLikeMutation] = useMutation(TOGGLE_LIKE, {\n    variables: {\n      postId: id\n    }\n  });\n  const [addCommentMutation] = useMutation(ADD_COMMENT, {\n    variables: {\n      postId: id,\n      text: comment.value\n    }\n  });\n  const [deleteCommentMutation] = useMutation(DELETE_COMMENT, {\n    variables: {\n      commentId: comments\n    }\n  });\n\n  const slide = () => {\n    const totalFiles = files.length;\n\n    if (currentItem === totalFiles - 1) {\n      setTimeout(() => setCurrentItem(0), 3000);\n    } else {\n      setTimeout(() => setCurrentItem(currentItem + 1), 3000);\n    }\n  };\n\n  useEffect(() => {\n    //componentDidMount에서 작동한다.\n    slide();\n  }, [currentItem]); //그리고 currentItem이 변할때마다 실행되는 것이다 뭐가 다시 slide()가\n\n  const deleteCommentPress = async () => {\n    const {\n      data\n    } = await deleteCommentMutation();\n  };\n\n  const toggleLike = () => {\n    toggleLikeMutation();\n\n    if (isLikedS === true) {\n      setIsLiked(false);\n      setLikeCount(likeCountS - 1);\n    } else {\n      setIsLiked(true);\n      setLikeCount(likeCountS + 1);\n    }\n  };\n\n  const onkeyPress = async event => {\n    const {\n      which\n    } = event;\n\n    if (which === 13) {\n      event.preventDefault();\n\n      try {\n        const {\n          data: {\n            addComment\n          }\n        } = await addCommentMutation();\n        console.log(addComment);\n        setSelfComments();\n        comment.setValue(\"\");\n      } catch {\n        toast.error(\"댓글을 입력할 수 없습니다.\");\n      } //addCommentMutation();\n\n    }\n\n    return;\n  };\n\n  return /*#__PURE__*/React.createElement(PostPresenter, {\n    user: user,\n    location: location,\n    caption: caption,\n    files: files,\n    likeCount: likeCountS,\n    isLiked: isLikedS,\n    comments: comments,\n    createdAt: createdAt,\n    newComment: comment,\n    commentId: commentId,\n    setIsLiked: setIsLiked,\n    setLikeCount: setLikeCount,\n    currentItem: currentItem,\n    toggleLike: toggleLike,\n    onkeyPress: onkeyPress,\n    selfComments: selfComments,\n    deleteCommentPress: deleteCommentPress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  });\n};\nPostContainer.propTypes = {\n  id: PropTypes.string.isRequired,\n  user: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    avatar: PropTypes.string,\n    username: PropTypes.string.isRequired\n  }).isRequired,\n  files: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired\n  })).isRequired,\n  likeCount: PropTypes.number.isRequired,\n  isLiked: PropTypes.bool.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired,\n    user: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      username: PropTypes.string.isRequired\n    }).isRequired,\n    createdAt: PropTypes.string\n  })).isRequired,\n  caption: PropTypes.string.isRequired,\n  location: PropTypes.string,\n  createdAt: PropTypes.string.isRequired\n};\nexport default PostContainer;","map":{"version":3,"sources":["/Users/insungsong/Documents/prismagram-frontend/src/Components/Post/PostContainer.js"],"names":["React","useState","useEffect","PropTypes","useInput","PostPresenter","useMutation","useQuery","TOGGLE_LIKE","ADD_COMMENT","DELETE_COMMENT","ME","toast","useCheckingId","PostContainer","id","user","files","likeCount","isLiked","comments","createdAt","caption","location","isLikedS","setIsLiked","likeCountS","setLikeCount","currentItem","setCurrentItem","selfComments","setSelfComments","comment","commentId","data","meQuery","toggleLikeMutation","variables","postId","addCommentMutation","text","value","deleteCommentMutation","slide","totalFiles","length","setTimeout","deleteCommentPress","toggleLike","onkeyPress","event","which","preventDefault","addComment","console","log","setValue","error","propTypes","string","isRequired","shape","avatar","username","arrayOf","url","number","bool"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport useInput from \"../../Hooks/useInput\";\nimport PostPresenter from \"./PostPresenter\";\nimport { useMutation, useQuery } from \"react-apollo-hooks\";\nimport { TOGGLE_LIKE, ADD_COMMENT, DELETE_COMMENT } from \"./PostQuerise\";\nimport { ME } from \"../../SharedQuerise\";\nimport { toast } from \"react-toastify\";\nimport useCheckingId from \"../../Hooks/useCheckingId\";\n\nexport const PostContainer = ({\n  id,\n  user,\n  files,\n  likeCount,\n  isLiked,\n  comments,\n  createdAt,\n  caption,\n  location\n}) => {\n  const [isLikedS, setIsLiked] = useState(isLiked);\n  const [likeCountS, setLikeCount] = useState(likeCount);\n  const [currentItem, setCurrentItem] = useState(0);\n  const [selfComments, setSelfComments] = useState([]);\n  const comment = useInput(\"\");\n  const commentId = useCheckingId(\"\");\n  const { data: meQuery } = useQuery(ME);\n  const [toggleLikeMutation] = useMutation(TOGGLE_LIKE, {\n    variables: { postId: id }\n  });\n  const [addCommentMutation] = useMutation(ADD_COMMENT, {\n    variables: { postId: id, text: comment.value }\n  });\n  const [deleteCommentMutation] = useMutation(DELETE_COMMENT, {\n    variables: { commentId: comments }\n  });\n  const slide = () => {\n    const totalFiles = files.length;\n    if (currentItem === totalFiles - 1) {\n      setTimeout(() => setCurrentItem(0), 3000);\n    } else {\n      setTimeout(() => setCurrentItem(currentItem + 1), 3000);\n    }\n  };\n  useEffect(() => {\n    //componentDidMount에서 작동한다.\n    slide();\n  }, [currentItem]); //그리고 currentItem이 변할때마다 실행되는 것이다 뭐가 다시 slide()가\n\n  const deleteCommentPress = async () => {\n    const { data } = await deleteCommentMutation();\n  };\n\n  const toggleLike = () => {\n    toggleLikeMutation();\n    if (isLikedS === true) {\n      setIsLiked(false);\n      setLikeCount(likeCountS - 1);\n    } else {\n      setIsLiked(true);\n      setLikeCount(likeCountS + 1);\n    }\n  };\n\n  const onkeyPress = async (event) => {\n    const { which } = event;\n    if (which === 13) {\n      event.preventDefault();\n      try {\n        const {\n          data: { addComment }\n        } = await addCommentMutation();\n        console.log(addComment);\n        setSelfComments();\n        comment.setValue(\"\");\n      } catch {\n        toast.error(\"댓글을 입력할 수 없습니다.\");\n      }\n      //addCommentMutation();\n    }\n    return;\n  };\n  return (\n    <PostPresenter\n      user={user}\n      location={location}\n      caption={caption}\n      files={files}\n      likeCount={likeCountS}\n      isLiked={isLikedS}\n      comments={comments}\n      createdAt={createdAt}\n      newComment={comment}\n      commentId={commentId}\n      setIsLiked={setIsLiked}\n      setLikeCount={setLikeCount}\n      currentItem={currentItem}\n      toggleLike={toggleLike}\n      onkeyPress={onkeyPress}\n      selfComments={selfComments}\n      deleteCommentPress={deleteCommentPress}\n    />\n  );\n};\n\nPostContainer.propTypes = {\n  id: PropTypes.string.isRequired,\n  user: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    avatar: PropTypes.string,\n    username: PropTypes.string.isRequired\n  }).isRequired,\n  files: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      url: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  likeCount: PropTypes.number.isRequired,\n  isLiked: PropTypes.bool.isRequired,\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      text: PropTypes.string.isRequired,\n      user: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        username: PropTypes.string.isRequired\n      }).isRequired,\n      createdAt: PropTypes.string\n    })\n  ).isRequired,\n  caption: PropTypes.string.isRequired,\n  location: PropTypes.string,\n  createdAt: PropTypes.string.isRequired\n};\n\nexport default PostContainer;\n"]},"metadata":{},"sourceType":"module"}