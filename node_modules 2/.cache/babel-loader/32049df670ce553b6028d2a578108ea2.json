{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nimport { Kind } from \"../language/kinds.mjs\";\nimport { visit } from \"../language/visitor.mjs\";\nimport { TypeInfo, visitWithTypeInfo } from \"../utilities/TypeInfo.mjs\";\n/**\n * An instance of this class is passed as the \"this\" context to all validators,\n * allowing access to commonly useful contextual information from within a\n * validation rule.\n */\n\nexport var ASTValidationContext = /*#__PURE__*/function () {\n  function ASTValidationContext(ast, onError) {\n    this._ast = ast;\n    this._fragments = undefined;\n    this._fragmentSpreads = new Map();\n    this._recursivelyReferencedFragments = new Map();\n    this._onError = onError;\n  }\n\n  var _proto = ASTValidationContext.prototype;\n\n  _proto.reportError = function reportError(error) {\n    this._onError(error);\n  };\n\n  _proto.getDocument = function getDocument() {\n    return this._ast;\n  };\n\n  _proto.getFragment = function getFragment(name) {\n    var fragments = this._fragments;\n\n    if (!fragments) {\n      this._fragments = fragments = this.getDocument().definitions.reduce(function (frags, statement) {\n        if (statement.kind === Kind.FRAGMENT_DEFINITION) {\n          frags[statement.name.value] = statement;\n        }\n\n        return frags;\n      }, Object.create(null));\n    }\n\n    return fragments[name];\n  };\n\n  _proto.getFragmentSpreads = function getFragmentSpreads(node) {\n    var spreads = this._fragmentSpreads.get(node);\n\n    if (!spreads) {\n      spreads = [];\n      var setsToVisit = [node];\n\n      while (setsToVisit.length !== 0) {\n        var set = setsToVisit.pop();\n\n        for (var _i2 = 0, _set$selections2 = set.selections; _i2 < _set$selections2.length; _i2++) {\n          var selection = _set$selections2[_i2];\n\n          if (selection.kind === Kind.FRAGMENT_SPREAD) {\n            spreads.push(selection);\n          } else if (selection.selectionSet) {\n            setsToVisit.push(selection.selectionSet);\n          }\n        }\n      }\n\n      this._fragmentSpreads.set(node, spreads);\n    }\n\n    return spreads;\n  };\n\n  _proto.getRecursivelyReferencedFragments = function getRecursivelyReferencedFragments(operation) {\n    var fragments = this._recursivelyReferencedFragments.get(operation);\n\n    if (!fragments) {\n      fragments = [];\n      var collectedNames = Object.create(null);\n      var nodesToVisit = [operation.selectionSet];\n\n      while (nodesToVisit.length !== 0) {\n        var node = nodesToVisit.pop();\n\n        for (var _i4 = 0, _this$getFragmentSpre2 = this.getFragmentSpreads(node); _i4 < _this$getFragmentSpre2.length; _i4++) {\n          var spread = _this$getFragmentSpre2[_i4];\n          var fragName = spread.name.value;\n\n          if (collectedNames[fragName] !== true) {\n            collectedNames[fragName] = true;\n            var fragment = this.getFragment(fragName);\n\n            if (fragment) {\n              fragments.push(fragment);\n              nodesToVisit.push(fragment.selectionSet);\n            }\n          }\n        }\n      }\n\n      this._recursivelyReferencedFragments.set(operation, fragments);\n    }\n\n    return fragments;\n  };\n\n  return ASTValidationContext;\n}();\nexport var SDLValidationContext = /*#__PURE__*/function (_ASTValidationContext) {\n  _inheritsLoose(SDLValidationContext, _ASTValidationContext);\n\n  var _super = _createSuper(SDLValidationContext);\n\n  function SDLValidationContext(ast, schema, onError) {\n    var _this;\n\n    _this = _ASTValidationContext.call(this, ast, onError) || this;\n    _this._schema = schema;\n    return _this;\n  }\n\n  var _proto2 = SDLValidationContext.prototype;\n\n  _proto2.getSchema = function getSchema() {\n    return this._schema;\n  };\n\n  return SDLValidationContext;\n}(ASTValidationContext);\nexport var ValidationContext = /*#__PURE__*/function (_ASTValidationContext2) {\n  _inheritsLoose(ValidationContext, _ASTValidationContext2);\n\n  var _super2 = _createSuper(ValidationContext);\n\n  function ValidationContext(schema, ast, typeInfo, onError) {\n    var _this2;\n\n    _this2 = _ASTValidationContext2.call(this, ast, onError) || this;\n    _this2._schema = schema;\n    _this2._typeInfo = typeInfo;\n    _this2._variableUsages = new Map();\n    _this2._recursiveVariableUsages = new Map();\n    return _this2;\n  }\n\n  var _proto3 = ValidationContext.prototype;\n\n  _proto3.getSchema = function getSchema() {\n    return this._schema;\n  };\n\n  _proto3.getVariableUsages = function getVariableUsages(node) {\n    var usages = this._variableUsages.get(node);\n\n    if (!usages) {\n      var newUsages = [];\n      var typeInfo = new TypeInfo(this._schema);\n      visit(node, visitWithTypeInfo(typeInfo, {\n        VariableDefinition: function VariableDefinition() {\n          return false;\n        },\n        Variable: function Variable(variable) {\n          newUsages.push({\n            node: variable,\n            type: typeInfo.getInputType(),\n            defaultValue: typeInfo.getDefaultValue()\n          });\n        }\n      }));\n      usages = newUsages;\n\n      this._variableUsages.set(node, usages);\n    }\n\n    return usages;\n  };\n\n  _proto3.getRecursiveVariableUsages = function getRecursiveVariableUsages(operation) {\n    var usages = this._recursiveVariableUsages.get(operation);\n\n    if (!usages) {\n      usages = this.getVariableUsages(operation);\n\n      for (var _i6 = 0, _this$getRecursivelyR2 = this.getRecursivelyReferencedFragments(operation); _i6 < _this$getRecursivelyR2.length; _i6++) {\n        var frag = _this$getRecursivelyR2[_i6];\n        usages = usages.concat(this.getVariableUsages(frag));\n      }\n\n      this._recursiveVariableUsages.set(operation, usages);\n    }\n\n    return usages;\n  };\n\n  _proto3.getType = function getType() {\n    return this._typeInfo.getType();\n  };\n\n  _proto3.getParentType = function getParentType() {\n    return this._typeInfo.getParentType();\n  };\n\n  _proto3.getInputType = function getInputType() {\n    return this._typeInfo.getInputType();\n  };\n\n  _proto3.getParentInputType = function getParentInputType() {\n    return this._typeInfo.getParentInputType();\n  };\n\n  _proto3.getFieldDef = function getFieldDef() {\n    return this._typeInfo.getFieldDef();\n  };\n\n  _proto3.getDirective = function getDirective() {\n    return this._typeInfo.getDirective();\n  };\n\n  _proto3.getArgument = function getArgument() {\n    return this._typeInfo.getArgument();\n  };\n\n  return ValidationContext;\n}(ASTValidationContext);","map":{"version":3,"sources":["/Users/insungsong/Documents/prismagram-frontend/node_modules/graphql/validation/ValidationContext.mjs"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_createSuper","Derived","Super","_getPrototypeOf","result","_isNativeReflectConstruct","NewTarget","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","call","_assertThisInitialized","ReferenceError","sham","Proxy","Date","toString","e","o","Object","setPrototypeOf","getPrototypeOf","__proto__","_inheritsLoose","subClass","superClass","create","Kind","visit","TypeInfo","visitWithTypeInfo","ASTValidationContext","ast","onError","_ast","_fragments","undefined","_fragmentSpreads","Map","_recursivelyReferencedFragments","_onError","_proto","reportError","error","getDocument","getFragment","name","fragments","definitions","reduce","frags","statement","kind","FRAGMENT_DEFINITION","value","getFragmentSpreads","node","spreads","get","setsToVisit","length","set","pop","_i2","_set$selections2","selections","selection","FRAGMENT_SPREAD","push","selectionSet","getRecursivelyReferencedFragments","operation","collectedNames","nodesToVisit","_i4","_this$getFragmentSpre2","spread","fragName","fragment","SDLValidationContext","_ASTValidationContext","_super","schema","_this","_schema","_proto2","getSchema","ValidationContext","_ASTValidationContext2","_super2","typeInfo","_this2","_typeInfo","_variableUsages","_recursiveVariableUsages","_proto3","getVariableUsages","usages","newUsages","VariableDefinition","Variable","variable","type","getInputType","defaultValue","getDefaultValue","getRecursiveVariableUsages","_i6","_this$getRecursivelyR2","frag","concat","getType","getParentType","getParentInputType","getFieldDef","getDirective","getArgument"],"mappings":"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","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nimport { Kind } from \"../language/kinds.mjs\";\nimport { visit } from \"../language/visitor.mjs\";\nimport { TypeInfo, visitWithTypeInfo } from \"../utilities/TypeInfo.mjs\";\n\n/**\n * An instance of this class is passed as the \"this\" context to all validators,\n * allowing access to commonly useful contextual information from within a\n * validation rule.\n */\nexport var ASTValidationContext = /*#__PURE__*/function () {\n  function ASTValidationContext(ast, onError) {\n    this._ast = ast;\n    this._fragments = undefined;\n    this._fragmentSpreads = new Map();\n    this._recursivelyReferencedFragments = new Map();\n    this._onError = onError;\n  }\n\n  var _proto = ASTValidationContext.prototype;\n\n  _proto.reportError = function reportError(error) {\n    this._onError(error);\n  };\n\n  _proto.getDocument = function getDocument() {\n    return this._ast;\n  };\n\n  _proto.getFragment = function getFragment(name) {\n    var fragments = this._fragments;\n\n    if (!fragments) {\n      this._fragments = fragments = this.getDocument().definitions.reduce(function (frags, statement) {\n        if (statement.kind === Kind.FRAGMENT_DEFINITION) {\n          frags[statement.name.value] = statement;\n        }\n\n        return frags;\n      }, Object.create(null));\n    }\n\n    return fragments[name];\n  };\n\n  _proto.getFragmentSpreads = function getFragmentSpreads(node) {\n    var spreads = this._fragmentSpreads.get(node);\n\n    if (!spreads) {\n      spreads = [];\n      var setsToVisit = [node];\n\n      while (setsToVisit.length !== 0) {\n        var set = setsToVisit.pop();\n\n        for (var _i2 = 0, _set$selections2 = set.selections; _i2 < _set$selections2.length; _i2++) {\n          var selection = _set$selections2[_i2];\n\n          if (selection.kind === Kind.FRAGMENT_SPREAD) {\n            spreads.push(selection);\n          } else if (selection.selectionSet) {\n            setsToVisit.push(selection.selectionSet);\n          }\n        }\n      }\n\n      this._fragmentSpreads.set(node, spreads);\n    }\n\n    return spreads;\n  };\n\n  _proto.getRecursivelyReferencedFragments = function getRecursivelyReferencedFragments(operation) {\n    var fragments = this._recursivelyReferencedFragments.get(operation);\n\n    if (!fragments) {\n      fragments = [];\n      var collectedNames = Object.create(null);\n      var nodesToVisit = [operation.selectionSet];\n\n      while (nodesToVisit.length !== 0) {\n        var node = nodesToVisit.pop();\n\n        for (var _i4 = 0, _this$getFragmentSpre2 = this.getFragmentSpreads(node); _i4 < _this$getFragmentSpre2.length; _i4++) {\n          var spread = _this$getFragmentSpre2[_i4];\n          var fragName = spread.name.value;\n\n          if (collectedNames[fragName] !== true) {\n            collectedNames[fragName] = true;\n            var fragment = this.getFragment(fragName);\n\n            if (fragment) {\n              fragments.push(fragment);\n              nodesToVisit.push(fragment.selectionSet);\n            }\n          }\n        }\n      }\n\n      this._recursivelyReferencedFragments.set(operation, fragments);\n    }\n\n    return fragments;\n  };\n\n  return ASTValidationContext;\n}();\nexport var SDLValidationContext = /*#__PURE__*/function (_ASTValidationContext) {\n  _inheritsLoose(SDLValidationContext, _ASTValidationContext);\n\n  var _super = _createSuper(SDLValidationContext);\n\n  function SDLValidationContext(ast, schema, onError) {\n    var _this;\n\n    _this = _ASTValidationContext.call(this, ast, onError) || this;\n    _this._schema = schema;\n    return _this;\n  }\n\n  var _proto2 = SDLValidationContext.prototype;\n\n  _proto2.getSchema = function getSchema() {\n    return this._schema;\n  };\n\n  return SDLValidationContext;\n}(ASTValidationContext);\nexport var ValidationContext = /*#__PURE__*/function (_ASTValidationContext2) {\n  _inheritsLoose(ValidationContext, _ASTValidationContext2);\n\n  var _super2 = _createSuper(ValidationContext);\n\n  function ValidationContext(schema, ast, typeInfo, onError) {\n    var _this2;\n\n    _this2 = _ASTValidationContext2.call(this, ast, onError) || this;\n    _this2._schema = schema;\n    _this2._typeInfo = typeInfo;\n    _this2._variableUsages = new Map();\n    _this2._recursiveVariableUsages = new Map();\n    return _this2;\n  }\n\n  var _proto3 = ValidationContext.prototype;\n\n  _proto3.getSchema = function getSchema() {\n    return this._schema;\n  };\n\n  _proto3.getVariableUsages = function getVariableUsages(node) {\n    var usages = this._variableUsages.get(node);\n\n    if (!usages) {\n      var newUsages = [];\n      var typeInfo = new TypeInfo(this._schema);\n      visit(node, visitWithTypeInfo(typeInfo, {\n        VariableDefinition: function VariableDefinition() {\n          return false;\n        },\n        Variable: function Variable(variable) {\n          newUsages.push({\n            node: variable,\n            type: typeInfo.getInputType(),\n            defaultValue: typeInfo.getDefaultValue()\n          });\n        }\n      }));\n      usages = newUsages;\n\n      this._variableUsages.set(node, usages);\n    }\n\n    return usages;\n  };\n\n  _proto3.getRecursiveVariableUsages = function getRecursiveVariableUsages(operation) {\n    var usages = this._recursiveVariableUsages.get(operation);\n\n    if (!usages) {\n      usages = this.getVariableUsages(operation);\n\n      for (var _i6 = 0, _this$getRecursivelyR2 = this.getRecursivelyReferencedFragments(operation); _i6 < _this$getRecursivelyR2.length; _i6++) {\n        var frag = _this$getRecursivelyR2[_i6];\n        usages = usages.concat(this.getVariableUsages(frag));\n      }\n\n      this._recursiveVariableUsages.set(operation, usages);\n    }\n\n    return usages;\n  };\n\n  _proto3.getType = function getType() {\n    return this._typeInfo.getType();\n  };\n\n  _proto3.getParentType = function getParentType() {\n    return this._typeInfo.getParentType();\n  };\n\n  _proto3.getInputType = function getInputType() {\n    return this._typeInfo.getInputType();\n  };\n\n  _proto3.getParentInputType = function getParentInputType() {\n    return this._typeInfo.getParentInputType();\n  };\n\n  _proto3.getFieldDef = function getFieldDef() {\n    return this._typeInfo.getFieldDef();\n  };\n\n  _proto3.getDirective = function getDirective() {\n    return this._typeInfo.getDirective();\n  };\n\n  _proto3.getArgument = function getArgument() {\n    return this._typeInfo.getArgument();\n  };\n\n  return ValidationContext;\n}(ASTValidationContext);\n"]},"metadata":{},"sourceType":"module"}