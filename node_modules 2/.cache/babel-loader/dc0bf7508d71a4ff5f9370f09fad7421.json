{"ast":null,"code":"var _jsxFileName = \"/Users/insungsong/Documents/prismagram-frontend/src/Components/Post/PostContainer.js\";\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport useInput from \"../../Hooks/useInput\";\nimport PostPresenter from \"./PostPresenter\";\nimport { useMutation, useQuery } from \"react-apollo-hooks\";\nimport { TOGGLE_LIKE, ADD_COMMENT, DELETE_COMMENT } from \"./PostQuerise\";\nimport { ME } from \"../../SharedQuerise\";\nimport { toast } from \"react-toastify\";\nexport const PostContainer = ({\n  id,\n  user,\n  files,\n  likeCount,\n  isLiked,\n  comments,\n  createdAt,\n  caption,\n  location\n}) => {\n  const [isLikedS, setIsLiked] = useState(isLiked);\n  const [likeCountS, setLikeCount] = useState(likeCount);\n  const [currentItem, setCurrentItem] = useState(0);\n  const [deleteCommentS, setDeleteCommentS] = useState(\"\");\n  const [selfComments, setSelfComments] = useState([]);\n  const comment = useInput(\"\");\n  const {\n    data: meQuery\n  } = useQuery(ME);\n  const [toggleLikeMutation] = useMutation(TOGGLE_LIKE, {\n    variables: {\n      postId: id\n    }\n  });\n  const [addCommentMutation] = useMutation(ADD_COMMENT, {\n    variables: {\n      postId: id,\n      text: comment.value\n    }\n  });\n  const [deleteCommentMutation] = useMutation(DELETE_COMMENT);\n\n  const slide = () => {\n    const totalFiles = files.length;\n\n    if (currentItem === totalFiles - 1) {\n      setTimeout(() => setCurrentItem(0), 3000);\n    } else {\n      setTimeout(() => setCurrentItem(currentItem + 1), 3000);\n    }\n  };\n\n  useEffect(() => {\n    //componentDidMount에서 작동한다.\n    slide();\n  }, [currentItem]); //그리고 currentItem이 변할때마다 실행되는 것이다 뭐가 다시 slide()가\n\n  const toggleLike = () => {\n    toggleLikeMutation();\n\n    if (isLikedS === true) {\n      setIsLiked(false);\n      setLikeCount(likeCountS - 1);\n    } else {\n      setIsLiked(true);\n      setLikeCount(likeCountS + 1);\n    }\n  };\n\n  const onkeyPress = async event => {\n    const {\n      which\n    } = event;\n\n    if (which === 13) {\n      event.preventDefault();\n\n      try {\n        const {\n          data: {\n            addComment\n          }\n        } = await addCommentMutation();\n        setSelfComments([...selfComments, addComment]);\n        comment.setValue(\"\");\n      } catch {\n        toast.error(\"댓글을 입력할 수 없습니다.\");\n      } //addCommentMutation();\n\n    }\n\n    return;\n  };\n\n  const CommentDeadProcessing = async data => {\n    const commentBox = comments.map(comment => comment.id);\n    const dataValue = commentBox.indexOf(data); // useEffect(async () => {\n    //   if (dataValue !== null) {\n    //     await deleteCommentMutation({\n    //       variables: { commentId: data }\n    //     });\n    //     comments.splice(dataValue, 1);\n    //   } else {\n    //     console.log(\"시발\");\n    //   }\n    // }, [commentBox]);\n    // for문 사용 delete comment문\n    // for (var i = 0; i <= commentBox.length; i++) {\n    //   if (data === commentBox[i]) {\n    //     await deleteCommentMutation({\n    //       variables: { commentId: data }\n    //     });\n    //     delete comments[i];\n    //     //comments.splice(i, 1);\n    //   } else {\n    //     console.log(\n    //       \"<svg>가 아닌 path를 누른 오류가 발생하여 id를 얻어올 수 없었습니다\"\n    //     );\n    //   }\n    // }\n  };\n\n  return /*#__PURE__*/React.createElement(PostPresenter, {\n    user: user,\n    location: location,\n    caption: caption,\n    files: files,\n    likeCount: likeCountS,\n    isLiked: isLikedS,\n    comments: comments,\n    createdAt: createdAt,\n    newComment: comment,\n    setIsLiked: setIsLiked,\n    setLikeCount: setLikeCount,\n    currentItem: currentItem,\n    toggleLike: toggleLike,\n    onkeyPress: onkeyPress,\n    selfComments: selfComments,\n    CommentDeadProcessing: CommentDeadProcessing,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  });\n};\nPostContainer.propTypes = {\n  id: PropTypes.string.isRequired,\n  user: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    avatar: PropTypes.string,\n    username: PropTypes.string.isRequired\n  }).isRequired,\n  files: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired\n  })).isRequired,\n  likeCount: PropTypes.number.isRequired,\n  isLiked: PropTypes.bool.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired,\n    user: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      username: PropTypes.string.isRequired\n    }).isRequired,\n    createdAt: PropTypes.string\n  })).isRequired,\n  caption: PropTypes.string.isRequired,\n  location: PropTypes.string,\n  createdAt: PropTypes.string.isRequired\n};\nexport default PostContainer;","map":{"version":3,"sources":["/Users/insungsong/Documents/prismagram-frontend/src/Components/Post/PostContainer.js"],"names":["React","useState","useEffect","PropTypes","useInput","PostPresenter","useMutation","useQuery","TOGGLE_LIKE","ADD_COMMENT","DELETE_COMMENT","ME","toast","PostContainer","id","user","files","likeCount","isLiked","comments","createdAt","caption","location","isLikedS","setIsLiked","likeCountS","setLikeCount","currentItem","setCurrentItem","deleteCommentS","setDeleteCommentS","selfComments","setSelfComments","comment","data","meQuery","toggleLikeMutation","variables","postId","addCommentMutation","text","value","deleteCommentMutation","slide","totalFiles","length","setTimeout","toggleLike","onkeyPress","event","which","preventDefault","addComment","setValue","error","CommentDeadProcessing","commentBox","map","dataValue","indexOf","propTypes","string","isRequired","shape","avatar","username","arrayOf","url","number","bool"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport useInput from \"../../Hooks/useInput\";\nimport PostPresenter from \"./PostPresenter\";\nimport { useMutation, useQuery } from \"react-apollo-hooks\";\nimport { TOGGLE_LIKE, ADD_COMMENT, DELETE_COMMENT } from \"./PostQuerise\";\nimport { ME } from \"../../SharedQuerise\";\nimport { toast } from \"react-toastify\";\n\nexport const PostContainer = ({\n  id,\n  user,\n  files,\n  likeCount,\n  isLiked,\n  comments,\n  createdAt,\n  caption,\n  location\n}) => {\n  const [isLikedS, setIsLiked] = useState(isLiked);\n  const [likeCountS, setLikeCount] = useState(likeCount);\n  const [currentItem, setCurrentItem] = useState(0);\n  const [deleteCommentS, setDeleteCommentS] = useState(\"\");\n  const [selfComments, setSelfComments] = useState([]);\n  const comment = useInput(\"\");\n  const { data: meQuery } = useQuery(ME);\n  const [toggleLikeMutation] = useMutation(TOGGLE_LIKE, {\n    variables: { postId: id }\n  });\n  const [addCommentMutation] = useMutation(ADD_COMMENT, {\n    variables: { postId: id, text: comment.value }\n  });\n\n  const [deleteCommentMutation] = useMutation(DELETE_COMMENT);\n\n  const slide = () => {\n    const totalFiles = files.length;\n    if (currentItem === totalFiles - 1) {\n      setTimeout(() => setCurrentItem(0), 3000);\n    } else {\n      setTimeout(() => setCurrentItem(currentItem + 1), 3000);\n    }\n  };\n  useEffect(() => {\n    //componentDidMount에서 작동한다.\n    slide();\n  }, [currentItem]); //그리고 currentItem이 변할때마다 실행되는 것이다 뭐가 다시 slide()가\n\n  const toggleLike = () => {\n    toggleLikeMutation();\n    if (isLikedS === true) {\n      setIsLiked(false);\n      setLikeCount(likeCountS - 1);\n    } else {\n      setIsLiked(true);\n      setLikeCount(likeCountS + 1);\n    }\n  };\n\n  const onkeyPress = async (event) => {\n    const { which } = event;\n    if (which === 13) {\n      event.preventDefault();\n      try {\n        const {\n          data: { addComment }\n        } = await addCommentMutation();\n\n        setSelfComments([...selfComments, addComment]);\n        comment.setValue(\"\");\n      } catch {\n        toast.error(\"댓글을 입력할 수 없습니다.\");\n      }\n      //addCommentMutation();\n    }\n    return;\n  };\n\n  const CommentDeadProcessing = async (data) => {\n    const commentBox = comments.map((comment) => comment.id);\n    const dataValue = commentBox.indexOf(data);\n\n    // useEffect(async () => {\n    //   if (dataValue !== null) {\n    //     await deleteCommentMutation({\n    //       variables: { commentId: data }\n    //     });\n    //     comments.splice(dataValue, 1);\n    //   } else {\n    //     console.log(\"시발\");\n    //   }\n    // }, [commentBox]);\n\n    // for문 사용 delete comment문\n    // for (var i = 0; i <= commentBox.length; i++) {\n    //   if (data === commentBox[i]) {\n    //     await deleteCommentMutation({\n    //       variables: { commentId: data }\n    //     });\n    //     delete comments[i];\n    //     //comments.splice(i, 1);\n    //   } else {\n    //     console.log(\n    //       \"<svg>가 아닌 path를 누른 오류가 발생하여 id를 얻어올 수 없었습니다\"\n    //     );\n    //   }\n    // }\n  };\n  return (\n    <PostPresenter\n      user={user}\n      location={location}\n      caption={caption}\n      files={files}\n      likeCount={likeCountS}\n      isLiked={isLikedS}\n      comments={comments}\n      createdAt={createdAt}\n      newComment={comment}\n      setIsLiked={setIsLiked}\n      setLikeCount={setLikeCount}\n      currentItem={currentItem}\n      toggleLike={toggleLike}\n      onkeyPress={onkeyPress}\n      selfComments={selfComments}\n      CommentDeadProcessing={CommentDeadProcessing}\n    />\n  );\n};\n\nPostContainer.propTypes = {\n  id: PropTypes.string.isRequired,\n  user: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    avatar: PropTypes.string,\n    username: PropTypes.string.isRequired\n  }).isRequired,\n  files: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      url: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  likeCount: PropTypes.number.isRequired,\n  isLiked: PropTypes.bool.isRequired,\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      text: PropTypes.string.isRequired,\n      user: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        username: PropTypes.string.isRequired\n      }).isRequired,\n      createdAt: PropTypes.string\n    })\n  ).isRequired,\n  caption: PropTypes.string.isRequired,\n  location: PropTypes.string,\n  createdAt: PropTypes.string.isRequired\n};\n\nexport default PostContainer;\n"]},"metadata":{},"sourceType":"module"}