{"ast":null,"code":"var _jsxFileName = \"/Users/insungsong/Documents/prismagram-frontend/src/Routes/Auth/AuthCotainer.js\";\nimport React, { useState } from \"react\";\nimport AuthPresenter from \"./AutherPresenter\";\nimport useInput from \"../../Hooks/useInput\";\nimport { useMutation } from \"react-apollo-hooks\";\nimport { LOG_IN } from \"./AuthQueries\";\nexport default (() => {\n  const [action, setAction] = useState(\"logIn\"); //Hooks\n\n  const username = useInput(\"\");\n  const firstName = useInput(\"\");\n  const lastName = useInput(\"\");\n  const email = useInput(\"\");\n  const requestSecret = useMutation(LOG_IN, {\n    variables: {\n      email: email.value\n    }\n  });\n\n  const onLogin = event => {\n    event.preventDefault();\n\n    if (email !== \"\") {\n      requestSecret();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(AuthPresenter, {\n    setAction: setAction,\n    action: action,\n    username: username,\n    firstName: firstName,\n    lastName: lastName,\n    email: email,\n    onLogin: onLogin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  });\n});","map":{"version":3,"sources":["/Users/insungsong/Documents/prismagram-frontend/src/Routes/Auth/AuthCotainer.js"],"names":["React","useState","AuthPresenter","useInput","useMutation","LOG_IN","action","setAction","username","firstName","lastName","email","requestSecret","variables","value","onLogin","event","preventDefault"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,MAAT,QAAuB,eAAvB;AAEA,gBAAe,MAAM;AACnB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,OAAD,CAApC,CADmB,CAC4B;;AAC/C,QAAMO,QAAQ,GAAGL,QAAQ,CAAC,EAAD,CAAzB;AACA,QAAMM,SAAS,GAAGN,QAAQ,CAAC,EAAD,CAA1B;AACA,QAAMO,QAAQ,GAAGP,QAAQ,CAAC,EAAD,CAAzB;AACA,QAAMQ,KAAK,GAAGR,QAAQ,CAAC,EAAD,CAAtB;AACA,QAAMS,aAAa,GAAGR,WAAW,CAACC,MAAD,EAAS;AACxCQ,IAAAA,SAAS,EAAE;AAAEF,MAAAA,KAAK,EAAEA,KAAK,CAACG;AAAf;AAD6B,GAAT,CAAjC;;AAIA,QAAMC,OAAO,GAAIC,KAAD,IAAW;AACzBA,IAAAA,KAAK,CAACC,cAAN;;AACA,QAAIN,KAAK,KAAK,EAAd,EAAkB;AAChBC,MAAAA,aAAa;AACd;AACF,GALD;;AAOA,sBACE,oBAAC,aAAD;AACE,IAAA,SAAS,EAAEL,SADb;AAEE,IAAA,MAAM,EAAED,MAFV;AAGE,IAAA,QAAQ,EAAEE,QAHZ;AAIE,IAAA,SAAS,EAAEC,SAJb;AAKE,IAAA,QAAQ,EAAEC,QALZ;AAME,IAAA,KAAK,EAAEC,KANT;AAOE,IAAA,OAAO,EAAEI,OAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAWD,CA5BD","sourcesContent":["import React, { useState } from \"react\";\nimport AuthPresenter from \"./AutherPresenter\";\nimport useInput from \"../../Hooks/useInput\";\nimport { useMutation } from \"react-apollo-hooks\";\nimport { LOG_IN } from \"./AuthQueries\";\n\nexport default () => {\n  const [action, setAction] = useState(\"logIn\"); //Hooks\n  const username = useInput(\"\");\n  const firstName = useInput(\"\");\n  const lastName = useInput(\"\");\n  const email = useInput(\"\");\n  const requestSecret = useMutation(LOG_IN, {\n    variables: { email: email.value }\n  });\n\n  const onLogin = (event) => {\n    event.preventDefault();\n    if (email !== \"\") {\n      requestSecret();\n    }\n  };\n\n  return (\n    <AuthPresenter\n      setAction={setAction}\n      action={action}\n      username={username}\n      firstName={firstName}\n      lastName={lastName}\n      email={email}\n      onLogin={onLogin}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}