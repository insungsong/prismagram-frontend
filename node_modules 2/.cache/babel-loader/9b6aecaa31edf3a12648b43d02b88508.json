{"ast":null,"code":"var _jsxFileName = \"/Users/insungsong/Documents/prismagram-frontend/src/Routes/Auth/AuthCotainer.js\";\nimport React, { useState } from \"react\";\nimport AuthPresenter from \"./AutherPresenter\";\nimport useInput from \"../../Hooks/useInput\";\nimport { useMutation } from \"react-apollo-hooks\";\nimport { LOG_IN, CREATE_ACCOUNT } from \"./AuthQueries\";\nimport { toast } from \"react-toastify\";\nexport default (() => {\n  const [action, setAction] = useState(\"logIn\"); //Hooks\n\n  const username = useInput(\"\");\n  const firstName = useInput(\"\");\n  const lastName = useInput(\"\");\n  const email = useInput(\"\");\n  const [requestSecretMutation] = useMutation(LOG_IN, {\n    variables: {\n      email: email.value\n    }\n  });\n  const [createAccountMutaion] = useMutation(CREATE_ACCOUNT, {\n    variables: {\n      email: email.value,\n      username: username.value,\n      firstName: firstName.value,\n      lastName: lastName.value\n    }\n  });\n\n  const onSubmit = async event => {\n    event.preventDefault();\n\n    if (action === \"logIn\") {\n      if (email.value !== \"\") {\n        try {\n          const data = await requestSecretMutation();\n          const {\n            requestSecret\n          } = data;\n\n          if (!requestSecret) {\n            toast.error(\"해당 하는 계정이 없습니다 계정을 등록하세요!\");\n            setTimeout(() => setAction(\"signUp\"), 3000);\n          }\n        } catch {\n          toast.error(\"요청을 보낼수 없습니다. 다시 시도해주세요.\");\n        }\n      } else {\n        toast.error(\"해당 메일은 존재하지 않는 계정입니다.\");\n      }\n    } else if (action === \"signUp\") {\n      if (email.value !== \"\" && username.value !== \"\" && firstName.value !== \"\" && lastName.value !== \"\") {\n        try {\n          await createAccount();\n        } catch {\n          toast.error(\"계정을 생성할 수 없습니다. 다시 시도해주세요.\");\n        }\n      }\n    } else {\n      toast.error(\"모든 항목의 기입이 필요합니다.\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(AuthPresenter, {\n    setAction: setAction,\n    action: action,\n    username: username,\n    firstName: firstName,\n    lastName: lastName,\n    email: email,\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  });\n});","map":{"version":3,"sources":["/Users/insungsong/Documents/prismagram-frontend/src/Routes/Auth/AuthCotainer.js"],"names":["React","useState","AuthPresenter","useInput","useMutation","LOG_IN","CREATE_ACCOUNT","toast","action","setAction","username","firstName","lastName","email","requestSecretMutation","variables","value","createAccountMutaion","onSubmit","event","preventDefault","data","requestSecret","error","setTimeout","createAccount"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,MAAT,EAAiBC,cAAjB,QAAuC,eAAvC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,gBAAe,MAAM;AACnB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,OAAD,CAApC,CADmB,CAC4B;;AAC/C,QAAMS,QAAQ,GAAGP,QAAQ,CAAC,EAAD,CAAzB;AACA,QAAMQ,SAAS,GAAGR,QAAQ,CAAC,EAAD,CAA1B;AACA,QAAMS,QAAQ,GAAGT,QAAQ,CAAC,EAAD,CAAzB;AACA,QAAMU,KAAK,GAAGV,QAAQ,CAAC,EAAD,CAAtB;AACA,QAAM,CAACW,qBAAD,IAA0BV,WAAW,CAACC,MAAD,EAAS;AAClDU,IAAAA,SAAS,EAAE;AAAEF,MAAAA,KAAK,EAAEA,KAAK,CAACG;AAAf;AADuC,GAAT,CAA3C;AAIA,QAAM,CAACC,oBAAD,IAAyBb,WAAW,CAACE,cAAD,EAAiB;AACzDS,IAAAA,SAAS,EAAE;AACTF,MAAAA,KAAK,EAAEA,KAAK,CAACG,KADJ;AAETN,MAAAA,QAAQ,EAAEA,QAAQ,CAACM,KAFV;AAGTL,MAAAA,SAAS,EAAEA,SAAS,CAACK,KAHZ;AAITJ,MAAAA,QAAQ,EAAEA,QAAQ,CAACI;AAJV;AAD8C,GAAjB,CAA1C;;AASA,QAAME,QAAQ,GAAG,MAAOC,KAAP,IAAiB;AAChCA,IAAAA,KAAK,CAACC,cAAN;;AACA,QAAIZ,MAAM,KAAK,OAAf,EAAwB;AACtB,UAAIK,KAAK,CAACG,KAAN,KAAgB,EAApB,EAAwB;AACtB,YAAI;AACF,gBAAMK,IAAI,GAAG,MAAMP,qBAAqB,EAAxC;AACA,gBAAM;AAAEQ,YAAAA;AAAF,cAAoBD,IAA1B;;AACA,cAAI,CAACC,aAAL,EAAoB;AAClBf,YAAAA,KAAK,CAACgB,KAAN,CAAY,2BAAZ;AACAC,YAAAA,UAAU,CAAC,MAAMf,SAAS,CAAC,QAAD,CAAhB,EAA4B,IAA5B,CAAV;AACD;AACF,SAPD,CAOE,MAAM;AACNF,UAAAA,KAAK,CAACgB,KAAN,CAAY,0BAAZ;AACD;AACF,OAXD,MAWO;AACLhB,QAAAA,KAAK,CAACgB,KAAN,CAAY,uBAAZ;AACD;AACF,KAfD,MAeO,IAAIf,MAAM,KAAK,QAAf,EAAyB;AAC9B,UACEK,KAAK,CAACG,KAAN,KAAgB,EAAhB,IACAN,QAAQ,CAACM,KAAT,KAAmB,EADnB,IAEAL,SAAS,CAACK,KAAV,KAAoB,EAFpB,IAGAJ,QAAQ,CAACI,KAAT,KAAmB,EAJrB,EAKE;AACA,YAAI;AACF,gBAAMS,aAAa,EAAnB;AACD,SAFD,CAEE,MAAM;AACNlB,UAAAA,KAAK,CAACgB,KAAN,CAAY,4BAAZ;AACD;AACF;AACF,KAbM,MAaA;AACLhB,MAAAA,KAAK,CAACgB,KAAN,CAAY,mBAAZ;AACD;AACF,GAjCD;;AAmCA,sBACE,oBAAC,aAAD;AACE,IAAA,SAAS,EAAEd,SADb;AAEE,IAAA,MAAM,EAAED,MAFV;AAGE,IAAA,QAAQ,EAAEE,QAHZ;AAIE,IAAA,SAAS,EAAEC,SAJb;AAKE,IAAA,QAAQ,EAAEC,QALZ;AAME,IAAA,KAAK,EAAEC,KANT;AAOE,IAAA,QAAQ,EAAEK,QAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAWD,CAjED","sourcesContent":["import React, { useState } from \"react\";\nimport AuthPresenter from \"./AutherPresenter\";\nimport useInput from \"../../Hooks/useInput\";\nimport { useMutation } from \"react-apollo-hooks\";\nimport { LOG_IN, CREATE_ACCOUNT } from \"./AuthQueries\";\nimport { toast } from \"react-toastify\";\n\nexport default () => {\n  const [action, setAction] = useState(\"logIn\"); //Hooks\n  const username = useInput(\"\");\n  const firstName = useInput(\"\");\n  const lastName = useInput(\"\");\n  const email = useInput(\"\");\n  const [requestSecretMutation] = useMutation(LOG_IN, {\n    variables: { email: email.value }\n  });\n\n  const [createAccountMutaion] = useMutation(CREATE_ACCOUNT, {\n    variables: {\n      email: email.value,\n      username: username.value,\n      firstName: firstName.value,\n      lastName: lastName.value\n    }\n  });\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    if (action === \"logIn\") {\n      if (email.value !== \"\") {\n        try {\n          const data = await requestSecretMutation();\n          const { requestSecret } = data;\n          if (!requestSecret) {\n            toast.error(\"해당 하는 계정이 없습니다 계정을 등록하세요!\");\n            setTimeout(() => setAction(\"signUp\"), 3000);\n          }\n        } catch {\n          toast.error(\"요청을 보낼수 없습니다. 다시 시도해주세요.\");\n        }\n      } else {\n        toast.error(\"해당 메일은 존재하지 않는 계정입니다.\");\n      }\n    } else if (action === \"signUp\") {\n      if (\n        email.value !== \"\" &&\n        username.value !== \"\" &&\n        firstName.value !== \"\" &&\n        lastName.value !== \"\"\n      ) {\n        try {\n          await createAccount();\n        } catch {\n          toast.error(\"계정을 생성할 수 없습니다. 다시 시도해주세요.\");\n        }\n      }\n    } else {\n      toast.error(\"모든 항목의 기입이 필요합니다.\");\n    }\n  };\n\n  return (\n    <AuthPresenter\n      setAction={setAction}\n      action={action}\n      username={username}\n      firstName={firstName}\n      lastName={lastName}\n      email={email}\n      onSubmit={onSubmit}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}