{"ast":null,"code":"var _jsxFileName = \"/Users/insungsong/Documents/prismagram-frontend/src/Components/Post/PostContainer.js\";\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport useInput from \"../../Hooks/useInput\";\nimport PostPresenter from \"./PostPresenter\";\nexport const PostContainer = ({\n  id,\n  user,\n  files,\n  likeCount,\n  isLiked,\n  comments,\n  createdAt\n}) => {\n  const [isLikedS, setIsLiked] = useState(isLiked);\n  const [likeCountS, setLikeCount] = useState(likeCount);\n  const comment = useInput(\"\");\n  return /*#__PURE__*/React.createElement(PostPresenter, {\n    user: user,\n    files: files,\n    likeCount: likeCountS,\n    isLiked: isLikedS,\n    comments: comments,\n    createdAt: createdAt,\n    newComment: comment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  });\n};\nPostContainer.propTypes = {\n  id: PropTypes.string.isRequired,\n  user: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    avatar: PropTypes.string,\n    username: PropTypes.string.isRequired\n  }).isRequired,\n  files: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired\n  })).isRequired,\n  likeCount: PropTypes.number.isRequired,\n  isLiked: PropTypes.bool.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired,\n    user: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      username: PropTypes.string.isRequired\n    }).isRequired,\n    createdAt: PropTypes.string\n  })).isRequired,\n  createdAt: PropTypes.string.isRequired\n};\nexport default PostContainer;","map":{"version":3,"sources":["/Users/insungsong/Documents/prismagram-frontend/src/Components/Post/PostContainer.js"],"names":["React","useState","PropTypes","useInput","PostPresenter","PostContainer","id","user","files","likeCount","isLiked","comments","createdAt","isLikedS","setIsLiked","likeCountS","setLikeCount","comment","propTypes","string","isRequired","shape","avatar","username","arrayOf","url","number","bool","text"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,OAAO,MAAMC,aAAa,GAAG,CAAC;AAC5BC,EAAAA,EAD4B;AAE5BC,EAAAA,IAF4B;AAG5BC,EAAAA,KAH4B;AAI5BC,EAAAA,SAJ4B;AAK5BC,EAAAA,OAL4B;AAM5BC,EAAAA,QAN4B;AAO5BC,EAAAA;AAP4B,CAAD,KAQvB;AACJ,QAAM,CAACC,QAAD,EAAWC,UAAX,IAAyBb,QAAQ,CAACS,OAAD,CAAvC;AACA,QAAM,CAACK,UAAD,EAAaC,YAAb,IAA6Bf,QAAQ,CAACQ,SAAD,CAA3C;AACA,QAAMQ,OAAO,GAAGd,QAAQ,CAAC,EAAD,CAAxB;AACA,sBACE,oBAAC,aAAD;AACE,IAAA,IAAI,EAAEI,IADR;AAEE,IAAA,KAAK,EAAEC,KAFT;AAGE,IAAA,SAAS,EAAEO,UAHb;AAIE,IAAA,OAAO,EAAEF,QAJX;AAKE,IAAA,QAAQ,EAAEF,QALZ;AAME,IAAA,SAAS,EAAEC,SANb;AAOE,IAAA,UAAU,EAAEK,OAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAWD,CAvBM;AAyBPZ,aAAa,CAACa,SAAd,GAA0B;AACxBZ,EAAAA,EAAE,EAAEJ,SAAS,CAACiB,MAAV,CAAiBC,UADG;AAExBb,EAAAA,IAAI,EAAEL,SAAS,CAACmB,KAAV,CAAgB;AACpBf,IAAAA,EAAE,EAAEJ,SAAS,CAACiB,MAAV,CAAiBC,UADD;AAEpBE,IAAAA,MAAM,EAAEpB,SAAS,CAACiB,MAFE;AAGpBI,IAAAA,QAAQ,EAAErB,SAAS,CAACiB,MAAV,CAAiBC;AAHP,GAAhB,EAIHA,UANqB;AAOxBZ,EAAAA,KAAK,EAAEN,SAAS,CAACsB,OAAV,CACLtB,SAAS,CAACmB,KAAV,CAAgB;AACdf,IAAAA,EAAE,EAAEJ,SAAS,CAACiB,MAAV,CAAiBC,UADP;AAEdK,IAAAA,GAAG,EAAEvB,SAAS,CAACiB,MAAV,CAAiBC;AAFR,GAAhB,CADK,EAKLA,UAZsB;AAaxBX,EAAAA,SAAS,EAAEP,SAAS,CAACwB,MAAV,CAAiBN,UAbJ;AAcxBV,EAAAA,OAAO,EAAER,SAAS,CAACyB,IAAV,CAAeP,UAdA;AAexBT,EAAAA,QAAQ,EAAET,SAAS,CAACsB,OAAV,CACRtB,SAAS,CAACmB,KAAV,CAAgB;AACdf,IAAAA,EAAE,EAAEJ,SAAS,CAACiB,MAAV,CAAiBC,UADP;AAEdQ,IAAAA,IAAI,EAAE1B,SAAS,CAACiB,MAAV,CAAiBC,UAFT;AAGdb,IAAAA,IAAI,EAAEL,SAAS,CAACmB,KAAV,CAAgB;AACpBf,MAAAA,EAAE,EAAEJ,SAAS,CAACiB,MAAV,CAAiBC,UADD;AAEpBG,MAAAA,QAAQ,EAAErB,SAAS,CAACiB,MAAV,CAAiBC;AAFP,KAAhB,EAGHA,UANW;AAOdR,IAAAA,SAAS,EAAEV,SAAS,CAACiB;AAPP,GAAhB,CADQ,EAURC,UAzBsB;AA0BxBR,EAAAA,SAAS,EAAEV,SAAS,CAACiB,MAAV,CAAiBC;AA1BJ,CAA1B;AA6BA,eAAef,aAAf","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport useInput from \"../../Hooks/useInput\";\nimport PostPresenter from \"./PostPresenter\";\n\nexport const PostContainer = ({\n  id,\n  user,\n  files,\n  likeCount,\n  isLiked,\n  comments,\n  createdAt\n}) => {\n  const [isLikedS, setIsLiked] = useState(isLiked);\n  const [likeCountS, setLikeCount] = useState(likeCount);\n  const comment = useInput(\"\");\n  return (\n    <PostPresenter\n      user={user}\n      files={files}\n      likeCount={likeCountS}\n      isLiked={isLikedS}\n      comments={comments}\n      createdAt={createdAt}\n      newComment={comment}\n    />\n  );\n};\n\nPostContainer.propTypes = {\n  id: PropTypes.string.isRequired,\n  user: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    avatar: PropTypes.string,\n    username: PropTypes.string.isRequired\n  }).isRequired,\n  files: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      url: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  likeCount: PropTypes.number.isRequired,\n  isLiked: PropTypes.bool.isRequired,\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      text: PropTypes.string.isRequired,\n      user: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        username: PropTypes.string.isRequired\n      }).isRequired,\n      createdAt: PropTypes.string\n    })\n  ).isRequired,\n  createdAt: PropTypes.string.isRequired\n};\n\nexport default PostContainer;\n"]},"metadata":{},"sourceType":"module"}