{"ast":null,"code":"import find from \"../polyfills/find.mjs\";\nimport flatMap from \"../polyfills/flatMap.mjs\";\nimport objectValues from \"../polyfills/objectValues.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { locatedError } from \"../error/locatedError.mjs\";\nimport { isValidNameError } from \"../utilities/assertValidName.mjs\";\nimport { isEqualType, isTypeSubTypeOf } from \"../utilities/typeComparators.mjs\";\nimport { isDirective } from \"./directives.mjs\";\nimport { isIntrospectionType } from \"./introspection.mjs\";\nimport { assertSchema } from \"./schema.mjs\";\nimport { isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isNamedType, isNonNullType, isInputType, isOutputType, isRequiredArgument } from \"./definition.mjs\";\n/**\n * Implements the \"Type Validation\" sub-sections of the specification's\n * \"Type System\" section.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the Schema is valid.\n */\n\nexport function validateSchema(schema) {\n  // First check to ensure the provided value is in fact a GraphQLSchema.\n  assertSchema(schema); // If this Schema has already been validated, return the previous results.\n\n  if (schema.__validationErrors) {\n    return schema.__validationErrors;\n  } // Validate the schema, producing a list of errors.\n\n\n  var context = new SchemaValidationContext(schema);\n  validateRootTypes(context);\n  validateDirectives(context);\n  validateTypes(context); // Persist the results of validation before returning to ensure validation\n  // does not run multiple times for this schema.\n\n  var errors = context.getErrors();\n  schema.__validationErrors = errors;\n  return errors;\n}\n/**\n * Utility function which asserts a schema is valid by throwing an error if\n * it is invalid.\n */\n\nexport function assertValidSchema(schema) {\n  var errors = validateSchema(schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}\n\nvar SchemaValidationContext = /*#__PURE__*/function () {\n  function SchemaValidationContext(schema) {\n    this._errors = [];\n    this.schema = schema;\n  }\n\n  var _proto = SchemaValidationContext.prototype;\n\n  _proto.reportError = function reportError(message, nodes) {\n    var _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;\n\n    this.addError(new GraphQLError(message, _nodes));\n  };\n\n  _proto.addError = function addError(error) {\n    this._errors.push(error);\n  };\n\n  _proto.getErrors = function getErrors() {\n    return this._errors;\n  };\n\n  return SchemaValidationContext;\n}();\n\nfunction validateRootTypes(context) {\n  var schema = context.schema;\n  var queryType = schema.getQueryType();\n\n  if (!queryType) {\n    context.reportError('Query root type must be provided.', schema.astNode);\n  } else if (!isObjectType(queryType)) {\n    context.reportError(\"Query root type must be Object type, it cannot be \".concat(inspect(queryType), \".\"), getOperationTypeNode(schema, queryType, 'query'));\n  }\n\n  var mutationType = schema.getMutationType();\n\n  if (mutationType && !isObjectType(mutationType)) {\n    context.reportError('Mutation root type must be Object type if provided, it cannot be ' + \"\".concat(inspect(mutationType), \".\"), getOperationTypeNode(schema, mutationType, 'mutation'));\n  }\n\n  var subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && !isObjectType(subscriptionType)) {\n    context.reportError('Subscription root type must be Object type if provided, it cannot be ' + \"\".concat(inspect(subscriptionType), \".\"), getOperationTypeNode(schema, subscriptionType, 'subscription'));\n  }\n}\n\nfunction getOperationTypeNode(schema, type, operation) {\n  var operationNodes = getAllSubNodes(schema, function (node) {\n    return node.operationTypes;\n  });\n\n  for (var _i2 = 0; _i2 < operationNodes.length; _i2++) {\n    var node = operationNodes[_i2];\n\n    if (node.operation === operation) {\n      return node.type;\n    }\n  }\n\n  return type.astNode;\n}\n\nfunction validateDirectives(context) {\n  for (var _i4 = 0, _context$schema$getDi2 = context.schema.getDirectives(); _i4 < _context$schema$getDi2.length; _i4++) {\n    var directive = _context$schema$getDi2[_i4]; // Ensure all directives are in fact GraphQL directives.\n\n    if (!isDirective(directive)) {\n      context.reportError(\"Expected directive but got: \".concat(inspect(directive), \".\"), directive === null || directive === void 0 ? void 0 : directive.astNode);\n      continue;\n    } // Ensure they are named correctly.\n\n\n    validateName(context, directive); // TODO: Ensure proper locations.\n    // Ensure the arguments are valid.\n\n    for (var _i6 = 0, _directive$args2 = directive.args; _i6 < _directive$args2.length; _i6++) {\n      var arg = _directive$args2[_i6]; // Ensure they are named correctly.\n\n      validateName(context, arg); // Ensure the type is an input type.\n\n      if (!isInputType(arg.type)) {\n        context.reportError(\"The type of @\".concat(directive.name, \"(\").concat(arg.name, \":) must be Input Type \") + \"but got: \".concat(inspect(arg.type), \".\"), arg.astNode);\n      }\n    }\n  }\n}\n\nfunction validateName(context, node) {\n  // Ensure names are valid, however introspection types opt out.\n  var error = isValidNameError(node.name);\n\n  if (error) {\n    context.addError(locatedError(error, node.astNode));\n  }\n}\n\nfunction validateTypes(context) {\n  var validateInputObjectCircularRefs = createInputObjectCircularRefsValidator(context);\n  var typeMap = context.schema.getTypeMap();\n\n  for (var _i8 = 0, _objectValues2 = objectValues(typeMap); _i8 < _objectValues2.length; _i8++) {\n    var type = _objectValues2[_i8]; // Ensure all provided types are in fact GraphQL type.\n\n    if (!isNamedType(type)) {\n      context.reportError(\"Expected GraphQL named type but got: \".concat(inspect(type), \".\"), type.astNode);\n      continue;\n    } // Ensure it is named correctly (excluding introspection types).\n\n\n    if (!isIntrospectionType(type)) {\n      validateName(context, type);\n    }\n\n    if (isObjectType(type)) {\n      // Ensure fields are valid\n      validateFields(context, type); // Ensure objects implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if (isInterfaceType(type)) {\n      // Ensure fields are valid.\n      validateFields(context, type); // Ensure interfaces implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if (isUnionType(type)) {\n      // Ensure Unions include valid member types.\n      validateUnionMembers(context, type);\n    } else if (isEnumType(type)) {\n      // Ensure Enums have valid values.\n      validateEnumValues(context, type);\n    } else if (isInputObjectType(type)) {\n      // Ensure Input Object fields are valid.\n      validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references\n\n      validateInputObjectCircularRefs(type);\n    }\n  }\n}\n\nfunction validateFields(context, type) {\n  var fields = objectValues(type.getFields()); // Objects and Interfaces both must define one or more fields.\n\n  if (fields.length === 0) {\n    context.reportError(\"Type \".concat(type.name, \" must define one or more fields.\"), getAllNodes(type));\n  }\n\n  for (var _i10 = 0; _i10 < fields.length; _i10++) {\n    var field = fields[_i10]; // Ensure they are named correctly.\n\n    validateName(context, field); // Ensure the type is an output type\n\n    if (!isOutputType(field.type)) {\n      var _field$astNode;\n\n      context.reportError(\"The type of \".concat(type.name, \".\").concat(field.name, \" must be Output Type \") + \"but got: \".concat(inspect(field.type), \".\"), (_field$astNode = field.astNode) === null || _field$astNode === void 0 ? void 0 : _field$astNode.type);\n    } // Ensure the arguments are valid\n\n\n    for (var _i12 = 0, _field$args2 = field.args; _i12 < _field$args2.length; _i12++) {\n      var arg = _field$args2[_i12];\n      var argName = arg.name; // Ensure they are named correctly.\n\n      validateName(context, arg); // Ensure the type is an input type\n\n      if (!isInputType(arg.type)) {\n        var _arg$astNode;\n\n        context.reportError(\"The type of \".concat(type.name, \".\").concat(field.name, \"(\").concat(argName, \":) must be Input \") + \"Type but got: \".concat(inspect(arg.type), \".\"), (_arg$astNode = arg.astNode) === null || _arg$astNode === void 0 ? void 0 : _arg$astNode.type);\n      }\n    }\n  }\n}\n\nfunction validateInterfaces(context, type) {\n  var ifaceTypeNames = Object.create(null);\n\n  for (var _i14 = 0, _type$getInterfaces2 = type.getInterfaces(); _i14 < _type$getInterfaces2.length; _i14++) {\n    var iface = _type$getInterfaces2[_i14];\n\n    if (!isInterfaceType(iface)) {\n      context.reportError(\"Type \".concat(inspect(type), \" must only implement Interface types, \") + \"it cannot implement \".concat(inspect(iface), \".\"), getAllImplementsInterfaceNodes(type, iface));\n      continue;\n    }\n\n    if (type === iface) {\n      context.reportError(\"Type \".concat(type.name, \" cannot implement itself because it would create a circular reference.\"), getAllImplementsInterfaceNodes(type, iface));\n      continue;\n    }\n\n    if (ifaceTypeNames[iface.name]) {\n      context.reportError(\"Type \".concat(type.name, \" can only implement \").concat(iface.name, \" once.\"), getAllImplementsInterfaceNodes(type, iface));\n      continue;\n    }\n\n    ifaceTypeNames[iface.name] = true;\n    validateTypeImplementsAncestors(context, type, iface);\n    validateTypeImplementsInterface(context, type, iface);\n  }\n}\n\nfunction validateTypeImplementsInterface(context, type, iface) {\n  var typeFieldMap = type.getFields(); // Assert each interface field is implemented.\n\n  for (var _i16 = 0, _objectValues4 = objectValues(iface.getFields()); _i16 < _objectValues4.length; _i16++) {\n    var ifaceField = _objectValues4[_i16];\n    var fieldName = ifaceField.name;\n    var typeField = typeFieldMap[fieldName]; // Assert interface field exists on type.\n\n    if (!typeField) {\n      context.reportError(\"Interface field \".concat(iface.name, \".\").concat(fieldName, \" expected but \").concat(type.name, \" does not provide it.\"), [ifaceField.astNode].concat(getAllNodes(type)));\n      continue;\n    } // Assert interface field type is satisfied by type field type, by being\n    // a valid subtype. (covariant)\n\n\n    if (!isTypeSubTypeOf(context.schema, typeField.type, ifaceField.type)) {\n      context.reportError(\"Interface field \".concat(iface.name, \".\").concat(fieldName, \" expects type \") + \"\".concat(inspect(ifaceField.type), \" but \").concat(type.name, \".\").concat(fieldName, \" \") + \"is type \".concat(inspect(typeField.type), \".\"), [ifaceField.astNode.type, typeField.astNode.type]);\n    } // Assert each interface field arg is implemented.\n\n\n    var _loop = function _loop(_i18, _ifaceField$args2) {\n      var ifaceArg = _ifaceField$args2[_i18];\n      var argName = ifaceArg.name;\n      var typeArg = find(typeField.args, function (arg) {\n        return arg.name === argName;\n      }); // Assert interface field arg exists on object field.\n\n      if (!typeArg) {\n        context.reportError(\"Interface field argument \".concat(iface.name, \".\").concat(fieldName, \"(\").concat(argName, \":) expected but \").concat(type.name, \".\").concat(fieldName, \" does not provide it.\"), [ifaceArg.astNode, typeField.astNode]);\n        return \"continue\";\n      } // Assert interface field arg type matches object field arg type.\n      // (invariant)\n      // TODO: change to contravariant?\n\n\n      if (!isEqualType(ifaceArg.type, typeArg.type)) {\n        context.reportError(\"Interface field argument \".concat(iface.name, \".\").concat(fieldName, \"(\").concat(argName, \":) \") + \"expects type \".concat(inspect(ifaceArg.type), \" but \") + \"\".concat(type.name, \".\").concat(fieldName, \"(\").concat(argName, \":) is type \") + \"\".concat(inspect(typeArg.type), \".\"), [ifaceArg.astNode.type, typeArg.astNode.type]);\n      } // TODO: validate default values?\n\n    };\n\n    for (var _i18 = 0, _ifaceField$args2 = ifaceField.args; _i18 < _ifaceField$args2.length; _i18++) {\n      var _ret = _loop(_i18, _ifaceField$args2);\n\n      if (_ret === \"continue\") continue;\n    } // Assert additional arguments must not be required.\n\n\n    var _loop2 = function _loop2(_i20, _typeField$args2) {\n      var typeArg = _typeField$args2[_i20];\n      var argName = typeArg.name;\n      var ifaceArg = find(ifaceField.args, function (arg) {\n        return arg.name === argName;\n      });\n\n      if (!ifaceArg && isRequiredArgument(typeArg)) {\n        context.reportError(\"Object field \".concat(type.name, \".\").concat(fieldName, \" includes required argument \").concat(argName, \" that is missing from the Interface field \").concat(iface.name, \".\").concat(fieldName, \".\"), [typeArg.astNode, ifaceField.astNode]);\n      }\n    };\n\n    for (var _i20 = 0, _typeField$args2 = typeField.args; _i20 < _typeField$args2.length; _i20++) {\n      _loop2(_i20, _typeField$args2);\n    }\n  }\n}\n\nfunction validateTypeImplementsAncestors(context, type, iface) {\n  var ifaceInterfaces = type.getInterfaces();\n\n  for (var _i22 = 0, _iface$getInterfaces2 = iface.getInterfaces(); _i22 < _iface$getInterfaces2.length; _i22++) {\n    var transitive = _iface$getInterfaces2[_i22];\n\n    if (ifaceInterfaces.indexOf(transitive) === -1) {\n      context.reportError(transitive === type ? \"Type \".concat(type.name, \" cannot implement \").concat(iface.name, \" because it would create a circular reference.\") : \"Type \".concat(type.name, \" must implement \").concat(transitive.name, \" because it is implemented by \").concat(iface.name, \".\"), [].concat(getAllImplementsInterfaceNodes(iface, transitive), getAllImplementsInterfaceNodes(type, iface)));\n    }\n  }\n}\n\nfunction validateUnionMembers(context, union) {\n  var memberTypes = union.getTypes();\n\n  if (memberTypes.length === 0) {\n    context.reportError(\"Union type \".concat(union.name, \" must define one or more member types.\"), getAllNodes(union));\n  }\n\n  var includedTypeNames = Object.create(null);\n\n  for (var _i24 = 0; _i24 < memberTypes.length; _i24++) {\n    var memberType = memberTypes[_i24];\n\n    if (includedTypeNames[memberType.name]) {\n      context.reportError(\"Union type \".concat(union.name, \" can only include type \").concat(memberType.name, \" once.\"), getUnionMemberTypeNodes(union, memberType.name));\n      continue;\n    }\n\n    includedTypeNames[memberType.name] = true;\n\n    if (!isObjectType(memberType)) {\n      context.reportError(\"Union type \".concat(union.name, \" can only include Object types, \") + \"it cannot include \".concat(inspect(memberType), \".\"), getUnionMemberTypeNodes(union, String(memberType)));\n    }\n  }\n}\n\nfunction validateEnumValues(context, enumType) {\n  var enumValues = enumType.getValues();\n\n  if (enumValues.length === 0) {\n    context.reportError(\"Enum type \".concat(enumType.name, \" must define one or more values.\"), getAllNodes(enumType));\n  }\n\n  for (var _i26 = 0; _i26 < enumValues.length; _i26++) {\n    var enumValue = enumValues[_i26];\n    var valueName = enumValue.name; // Ensure valid name.\n\n    validateName(context, enumValue);\n\n    if (valueName === 'true' || valueName === 'false' || valueName === 'null') {\n      context.reportError(\"Enum type \".concat(enumType.name, \" cannot include value: \").concat(valueName, \".\"), enumValue.astNode);\n    }\n  }\n}\n\nfunction validateInputFields(context, inputObj) {\n  var fields = objectValues(inputObj.getFields());\n\n  if (fields.length === 0) {\n    context.reportError(\"Input Object type \".concat(inputObj.name, \" must define one or more fields.\"), getAllNodes(inputObj));\n  } // Ensure the arguments are valid\n\n\n  for (var _i28 = 0; _i28 < fields.length; _i28++) {\n    var field = fields[_i28]; // Ensure they are named correctly.\n\n    validateName(context, field); // Ensure the type is an input type\n\n    if (!isInputType(field.type)) {\n      var _field$astNode2;\n\n      context.reportError(\"The type of \".concat(inputObj.name, \".\").concat(field.name, \" must be Input Type \") + \"but got: \".concat(inspect(field.type), \".\"), (_field$astNode2 = field.astNode) === null || _field$astNode2 === void 0 ? void 0 : _field$astNode2.type);\n    }\n  }\n}\n\nfunction createInputObjectCircularRefsValidator(context) {\n  // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.\n  // Tracks already visited types to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  var visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors\n\n  var fieldPath = []; // Position in the type path\n\n  var fieldPathIndexByTypeName = Object.create(null);\n  return detectCycleRecursive; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(inputObj) {\n    if (visitedTypes[inputObj.name]) {\n      return;\n    }\n\n    visitedTypes[inputObj.name] = true;\n    fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;\n    var fields = objectValues(inputObj.getFields());\n\n    for (var _i30 = 0; _i30 < fields.length; _i30++) {\n      var field = fields[_i30];\n\n      if (isNonNullType(field.type) && isInputObjectType(field.type.ofType)) {\n        var fieldType = field.type.ofType;\n        var cycleIndex = fieldPathIndexByTypeName[fieldType.name];\n        fieldPath.push(field);\n\n        if (cycleIndex === undefined) {\n          detectCycleRecursive(fieldType);\n        } else {\n          var cyclePath = fieldPath.slice(cycleIndex);\n          var pathStr = cyclePath.map(function (fieldObj) {\n            return fieldObj.name;\n          }).join('.');\n          context.reportError(\"Cannot reference Input Object \\\"\".concat(fieldType.name, \"\\\" within itself through a series of non-null fields: \\\"\").concat(pathStr, \"\\\".\"), cyclePath.map(function (fieldObj) {\n            return fieldObj.astNode;\n          }));\n        }\n\n        fieldPath.pop();\n      }\n    }\n\n    fieldPathIndexByTypeName[inputObj.name] = undefined;\n  }\n}\n\nfunction getAllNodes(object) {\n  var astNode = object.astNode,\n      extensionASTNodes = object.extensionASTNodes;\n  return astNode ? extensionASTNodes ? [astNode].concat(extensionASTNodes) : [astNode] : extensionASTNodes !== null && extensionASTNodes !== void 0 ? extensionASTNodes : [];\n}\n\nfunction getAllSubNodes(object, getter) {\n  /* istanbul ignore next (See https://github.com/graphql/graphql-js/issues/2203) */\n  return flatMap(getAllNodes(object), function (item) {\n    var _getter;\n\n    return (_getter = getter(item)) !== null && _getter !== void 0 ? _getter : [];\n  });\n}\n\nfunction getAllImplementsInterfaceNodes(type, iface) {\n  return getAllSubNodes(type, function (typeNode) {\n    return typeNode.interfaces;\n  }).filter(function (ifaceNode) {\n    return ifaceNode.name.value === iface.name;\n  });\n}\n\nfunction getUnionMemberTypeNodes(union, typeName) {\n  return getAllSubNodes(union, function (unionNode) {\n    return unionNode.types;\n  }).filter(function (typeNode) {\n    return typeNode.name.value === typeName;\n  });\n}","map":{"version":3,"sources":["/Users/insungsong/Documents/prismagram-frontend/node_modules/graphql/type/validate.mjs"],"names":["find","flatMap","objectValues","inspect","GraphQLError","locatedError","isValidNameError","isEqualType","isTypeSubTypeOf","isDirective","isIntrospectionType","assertSchema","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","isNamedType","isNonNullType","isInputType","isOutputType","isRequiredArgument","validateSchema","schema","__validationErrors","context","SchemaValidationContext","validateRootTypes","validateDirectives","validateTypes","errors","getErrors","assertValidSchema","length","Error","map","error","message","join","_errors","_proto","prototype","reportError","nodes","_nodes","Array","isArray","filter","Boolean","addError","push","queryType","getQueryType","astNode","concat","getOperationTypeNode","mutationType","getMutationType","subscriptionType","getSubscriptionType","type","operation","operationNodes","getAllSubNodes","node","operationTypes","_i2","_i4","_context$schema$getDi2","getDirectives","directive","validateName","_i6","_directive$args2","args","arg","name","validateInputObjectCircularRefs","createInputObjectCircularRefsValidator","typeMap","getTypeMap","_i8","_objectValues2","validateFields","validateInterfaces","validateUnionMembers","validateEnumValues","validateInputFields","fields","getFields","getAllNodes","_i10","field","_field$astNode","_i12","_field$args2","argName","_arg$astNode","ifaceTypeNames","Object","create","_i14","_type$getInterfaces2","getInterfaces","iface","getAllImplementsInterfaceNodes","validateTypeImplementsAncestors","validateTypeImplementsInterface","typeFieldMap","_i16","_objectValues4","ifaceField","fieldName","typeField","_loop","_i18","_ifaceField$args2","ifaceArg","typeArg","_ret","_loop2","_i20","_typeField$args2","ifaceInterfaces","_i22","_iface$getInterfaces2","transitive","indexOf","union","memberTypes","getTypes","includedTypeNames","_i24","memberType","getUnionMemberTypeNodes","String","enumType","enumValues","getValues","_i26","enumValue","valueName","inputObj","_i28","_field$astNode2","visitedTypes","fieldPath","fieldPathIndexByTypeName","detectCycleRecursive","_i30","ofType","fieldType","cycleIndex","undefined","cyclePath","slice","pathStr","fieldObj","pop","object","extensionASTNodes","getter","item","_getter","typeNode","interfaces","ifaceNode","value","typeName","unionNode","types"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,uBAAjB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAASC,gBAAT,QAAiC,kCAAjC;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,kCAA7C;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,YAAT,EAAuBC,eAAvB,EAAwCC,WAAxC,EAAqDC,UAArD,EAAiEC,iBAAjE,EAAoFC,WAApF,EAAiGC,aAAjG,EAAgHC,WAAhH,EAA6HC,YAA7H,EAA2IC,kBAA3I,QAAqK,kBAArK;AACA;;;;;;;;AAQA,OAAO,SAASC,cAAT,CAAwBC,MAAxB,EAAgC;AACrC;AACAZ,EAAAA,YAAY,CAACY,MAAD,CAAZ,CAFqC,CAEf;;AAEtB,MAAIA,MAAM,CAACC,kBAAX,EAA+B;AAC7B,WAAOD,MAAM,CAACC,kBAAd;AACD,GANoC,CAMnC;;;AAGF,MAAIC,OAAO,GAAG,IAAIC,uBAAJ,CAA4BH,MAA5B,CAAd;AACAI,EAAAA,iBAAiB,CAACF,OAAD,CAAjB;AACAG,EAAAA,kBAAkB,CAACH,OAAD,CAAlB;AACAI,EAAAA,aAAa,CAACJ,OAAD,CAAb,CAZqC,CAYb;AACxB;;AAEA,MAAIK,MAAM,GAAGL,OAAO,CAACM,SAAR,EAAb;AACAR,EAAAA,MAAM,CAACC,kBAAP,GAA4BM,MAA5B;AACA,SAAOA,MAAP;AACD;AACD;;;;;AAKA,OAAO,SAASE,iBAAT,CAA2BT,MAA3B,EAAmC;AACxC,MAAIO,MAAM,GAAGR,cAAc,CAACC,MAAD,CAA3B;;AAEA,MAAIO,MAAM,CAACG,MAAP,KAAkB,CAAtB,EAAyB;AACvB,UAAM,IAAIC,KAAJ,CAAUJ,MAAM,CAACK,GAAP,CAAW,UAAUC,KAAV,EAAiB;AAC1C,aAAOA,KAAK,CAACC,OAAb;AACD,KAFe,EAEbC,IAFa,CAER,MAFQ,CAAV,CAAN;AAGD;AACF;;AAED,IAAIZ,uBAAuB,GAAG,aAAa,YAAY;AACrD,WAASA,uBAAT,CAAiCH,MAAjC,EAAyC;AACvC,SAAKgB,OAAL,GAAe,EAAf;AACA,SAAKhB,MAAL,GAAcA,MAAd;AACD;;AAED,MAAIiB,MAAM,GAAGd,uBAAuB,CAACe,SAArC;;AAEAD,EAAAA,MAAM,CAACE,WAAP,GAAqB,SAASA,WAAT,CAAqBL,OAArB,EAA8BM,KAA9B,EAAqC;AACxD,QAAIC,MAAM,GAAGC,KAAK,CAACC,OAAN,CAAcH,KAAd,IAAuBA,KAAK,CAACI,MAAN,CAAaC,OAAb,CAAvB,GAA+CL,KAA5D;;AAEA,SAAKM,QAAL,CAAc,IAAI7C,YAAJ,CAAiBiC,OAAjB,EAA0BO,MAA1B,CAAd;AACD,GAJD;;AAMAJ,EAAAA,MAAM,CAACS,QAAP,GAAkB,SAASA,QAAT,CAAkBb,KAAlB,EAAyB;AACzC,SAAKG,OAAL,CAAaW,IAAb,CAAkBd,KAAlB;AACD,GAFD;;AAIAI,EAAAA,MAAM,CAACT,SAAP,GAAmB,SAASA,SAAT,GAAqB;AACtC,WAAO,KAAKQ,OAAZ;AACD,GAFD;;AAIA,SAAOb,uBAAP;AACD,CAvB0C,EAA3C;;AAyBA,SAASC,iBAAT,CAA2BF,OAA3B,EAAoC;AAClC,MAAIF,MAAM,GAAGE,OAAO,CAACF,MAArB;AACA,MAAI4B,SAAS,GAAG5B,MAAM,CAAC6B,YAAP,EAAhB;;AAEA,MAAI,CAACD,SAAL,EAAgB;AACd1B,IAAAA,OAAO,CAACiB,WAAR,CAAoB,mCAApB,EAAyDnB,MAAM,CAAC8B,OAAhE;AACD,GAFD,MAEO,IAAI,CAACzC,YAAY,CAACuC,SAAD,CAAjB,EAA8B;AACnC1B,IAAAA,OAAO,CAACiB,WAAR,CAAoB,qDAAqDY,MAArD,CAA4DnD,OAAO,CAACgD,SAAD,CAAnE,EAAgF,GAAhF,CAApB,EAA0GI,oBAAoB,CAAChC,MAAD,EAAS4B,SAAT,EAAoB,OAApB,CAA9H;AACD;;AAED,MAAIK,YAAY,GAAGjC,MAAM,CAACkC,eAAP,EAAnB;;AAEA,MAAID,YAAY,IAAI,CAAC5C,YAAY,CAAC4C,YAAD,CAAjC,EAAiD;AAC/C/B,IAAAA,OAAO,CAACiB,WAAR,CAAoB,sEAAsE,GAAGY,MAAH,CAAUnD,OAAO,CAACqD,YAAD,CAAjB,EAAiC,GAAjC,CAA1F,EAAiID,oBAAoB,CAAChC,MAAD,EAASiC,YAAT,EAAuB,UAAvB,CAArJ;AACD;;AAED,MAAIE,gBAAgB,GAAGnC,MAAM,CAACoC,mBAAP,EAAvB;;AAEA,MAAID,gBAAgB,IAAI,CAAC9C,YAAY,CAAC8C,gBAAD,CAArC,EAAyD;AACvDjC,IAAAA,OAAO,CAACiB,WAAR,CAAoB,0EAA0E,GAAGY,MAAH,CAAUnD,OAAO,CAACuD,gBAAD,CAAjB,EAAqC,GAArC,CAA9F,EAAyIH,oBAAoB,CAAChC,MAAD,EAASmC,gBAAT,EAA2B,cAA3B,CAA7J;AACD;AACF;;AAED,SAASH,oBAAT,CAA8BhC,MAA9B,EAAsCqC,IAAtC,EAA4CC,SAA5C,EAAuD;AACrD,MAAIC,cAAc,GAAGC,cAAc,CAACxC,MAAD,EAAS,UAAUyC,IAAV,EAAgB;AAC1D,WAAOA,IAAI,CAACC,cAAZ;AACD,GAFkC,CAAnC;;AAIA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGJ,cAAc,CAAC7B,MAAvC,EAA+CiC,GAAG,EAAlD,EAAsD;AACpD,QAAIF,IAAI,GAAGF,cAAc,CAACI,GAAD,CAAzB;;AAEA,QAAIF,IAAI,CAACH,SAAL,KAAmBA,SAAvB,EAAkC;AAChC,aAAOG,IAAI,CAACJ,IAAZ;AACD;AACF;;AAED,SAAOA,IAAI,CAACP,OAAZ;AACD;;AAED,SAASzB,kBAAT,CAA4BH,OAA5B,EAAqC;AACnC,OAAK,IAAI0C,GAAG,GAAG,CAAV,EAAaC,sBAAsB,GAAG3C,OAAO,CAACF,MAAR,CAAe8C,aAAf,EAA3C,EAA2EF,GAAG,GAAGC,sBAAsB,CAACnC,MAAxG,EAAgHkC,GAAG,EAAnH,EAAuH;AACrH,QAAIG,SAAS,GAAGF,sBAAsB,CAACD,GAAD,CAAtC,CADqH,CAGrH;;AACA,QAAI,CAAC1D,WAAW,CAAC6D,SAAD,CAAhB,EAA6B;AAC3B7C,MAAAA,OAAO,CAACiB,WAAR,CAAoB,+BAA+BY,MAA/B,CAAsCnD,OAAO,CAACmE,SAAD,CAA7C,EAA0D,GAA1D,CAApB,EAAoFA,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACjB,OAApJ;AACA;AACD,KAPoH,CAOnH;;;AAGFkB,IAAAA,YAAY,CAAC9C,OAAD,EAAU6C,SAAV,CAAZ,CAVqH,CAUnF;AAClC;;AAEA,SAAK,IAAIE,GAAG,GAAG,CAAV,EAAaC,gBAAgB,GAAGH,SAAS,CAACI,IAA/C,EAAqDF,GAAG,GAAGC,gBAAgB,CAACxC,MAA5E,EAAoFuC,GAAG,EAAvF,EAA2F;AACzF,UAAIG,GAAG,GAAGF,gBAAgB,CAACD,GAAD,CAA1B,CADyF,CAEzF;;AACAD,MAAAA,YAAY,CAAC9C,OAAD,EAAUkD,GAAV,CAAZ,CAHyF,CAG7D;;AAE5B,UAAI,CAACxD,WAAW,CAACwD,GAAG,CAACf,IAAL,CAAhB,EAA4B;AAC1BnC,QAAAA,OAAO,CAACiB,WAAR,CAAoB,gBAAgBY,MAAhB,CAAuBgB,SAAS,CAACM,IAAjC,EAAuC,GAAvC,EAA4CtB,MAA5C,CAAmDqB,GAAG,CAACC,IAAvD,EAA6D,wBAA7D,IAAyF,YAAYtB,MAAZ,CAAmBnD,OAAO,CAACwE,GAAG,CAACf,IAAL,CAA1B,EAAsC,GAAtC,CAA7G,EAAyJe,GAAG,CAACtB,OAA7J;AACD;AACF;AACF;AACF;;AAED,SAASkB,YAAT,CAAsB9C,OAAtB,EAA+BuC,IAA/B,EAAqC;AACnC;AACA,MAAI5B,KAAK,GAAG9B,gBAAgB,CAAC0D,IAAI,CAACY,IAAN,CAA5B;;AAEA,MAAIxC,KAAJ,EAAW;AACTX,IAAAA,OAAO,CAACwB,QAAR,CAAiB5C,YAAY,CAAC+B,KAAD,EAAQ4B,IAAI,CAACX,OAAb,CAA7B;AACD;AACF;;AAED,SAASxB,aAAT,CAAuBJ,OAAvB,EAAgC;AAC9B,MAAIoD,+BAA+B,GAAGC,sCAAsC,CAACrD,OAAD,CAA5E;AACA,MAAIsD,OAAO,GAAGtD,OAAO,CAACF,MAAR,CAAeyD,UAAf,EAAd;;AAEA,OAAK,IAAIC,GAAG,GAAG,CAAV,EAAaC,cAAc,GAAGhF,YAAY,CAAC6E,OAAD,CAA/C,EAA0DE,GAAG,GAAGC,cAAc,CAACjD,MAA/E,EAAuFgD,GAAG,EAA1F,EAA8F;AAC5F,QAAIrB,IAAI,GAAGsB,cAAc,CAACD,GAAD,CAAzB,CAD4F,CAG5F;;AACA,QAAI,CAAChE,WAAW,CAAC2C,IAAD,CAAhB,EAAwB;AACtBnC,MAAAA,OAAO,CAACiB,WAAR,CAAoB,wCAAwCY,MAAxC,CAA+CnD,OAAO,CAACyD,IAAD,CAAtD,EAA8D,GAA9D,CAApB,EAAwFA,IAAI,CAACP,OAA7F;AACA;AACD,KAP2F,CAO1F;;;AAGF,QAAI,CAAC3C,mBAAmB,CAACkD,IAAD,CAAxB,EAAgC;AAC9BW,MAAAA,YAAY,CAAC9C,OAAD,EAAUmC,IAAV,CAAZ;AACD;;AAED,QAAIhD,YAAY,CAACgD,IAAD,CAAhB,EAAwB;AACtB;AACAuB,MAAAA,cAAc,CAAC1D,OAAD,EAAUmC,IAAV,CAAd,CAFsB,CAES;;AAE/BwB,MAAAA,kBAAkB,CAAC3D,OAAD,EAAUmC,IAAV,CAAlB;AACD,KALD,MAKO,IAAI/C,eAAe,CAAC+C,IAAD,CAAnB,EAA2B;AAChC;AACAuB,MAAAA,cAAc,CAAC1D,OAAD,EAAUmC,IAAV,CAAd,CAFgC,CAED;;AAE/BwB,MAAAA,kBAAkB,CAAC3D,OAAD,EAAUmC,IAAV,CAAlB;AACD,KALM,MAKA,IAAI9C,WAAW,CAAC8C,IAAD,CAAf,EAAuB;AAC5B;AACAyB,MAAAA,oBAAoB,CAAC5D,OAAD,EAAUmC,IAAV,CAApB;AACD,KAHM,MAGA,IAAI7C,UAAU,CAAC6C,IAAD,CAAd,EAAsB;AAC3B;AACA0B,MAAAA,kBAAkB,CAAC7D,OAAD,EAAUmC,IAAV,CAAlB;AACD,KAHM,MAGA,IAAI5C,iBAAiB,CAAC4C,IAAD,CAArB,EAA6B;AAClC;AACA2B,MAAAA,mBAAmB,CAAC9D,OAAD,EAAUmC,IAAV,CAAnB,CAFkC,CAEE;;AAEpCiB,MAAAA,+BAA+B,CAACjB,IAAD,CAA/B;AACD;AACF;AACF;;AAED,SAASuB,cAAT,CAAwB1D,OAAxB,EAAiCmC,IAAjC,EAAuC;AACrC,MAAI4B,MAAM,GAAGtF,YAAY,CAAC0D,IAAI,CAAC6B,SAAL,EAAD,CAAzB,CADqC,CACQ;;AAE7C,MAAID,MAAM,CAACvD,MAAP,KAAkB,CAAtB,EAAyB;AACvBR,IAAAA,OAAO,CAACiB,WAAR,CAAoB,QAAQY,MAAR,CAAeM,IAAI,CAACgB,IAApB,EAA0B,kCAA1B,CAApB,EAAmFc,WAAW,CAAC9B,IAAD,CAA9F;AACD;;AAED,OAAK,IAAI+B,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGH,MAAM,CAACvD,MAAjC,EAAyC0D,IAAI,EAA7C,EAAiD;AAC/C,QAAIC,KAAK,GAAGJ,MAAM,CAACG,IAAD,CAAlB,CAD+C,CAE/C;;AACApB,IAAAA,YAAY,CAAC9C,OAAD,EAAUmE,KAAV,CAAZ,CAH+C,CAGjB;;AAE9B,QAAI,CAACxE,YAAY,CAACwE,KAAK,CAAChC,IAAP,CAAjB,EAA+B;AAC7B,UAAIiC,cAAJ;;AAEApE,MAAAA,OAAO,CAACiB,WAAR,CAAoB,eAAeY,MAAf,CAAsBM,IAAI,CAACgB,IAA3B,EAAiC,GAAjC,EAAsCtB,MAAtC,CAA6CsC,KAAK,CAAChB,IAAnD,EAAyD,uBAAzD,IAAoF,YAAYtB,MAAZ,CAAmBnD,OAAO,CAACyF,KAAK,CAAChC,IAAP,CAA1B,EAAwC,GAAxC,CAAxG,EAAsJ,CAACiC,cAAc,GAAGD,KAAK,CAACvC,OAAxB,MAAqC,IAArC,IAA6CwC,cAAc,KAAK,KAAK,CAArE,GAAyE,KAAK,CAA9E,GAAkFA,cAAc,CAACjC,IAAvP;AACD,KAT8C,CAS7C;;;AAGF,SAAK,IAAIkC,IAAI,GAAG,CAAX,EAAcC,YAAY,GAAGH,KAAK,CAAClB,IAAxC,EAA8CoB,IAAI,GAAGC,YAAY,CAAC9D,MAAlE,EAA0E6D,IAAI,EAA9E,EAAkF;AAChF,UAAInB,GAAG,GAAGoB,YAAY,CAACD,IAAD,CAAtB;AACA,UAAIE,OAAO,GAAGrB,GAAG,CAACC,IAAlB,CAFgF,CAExD;;AAExBL,MAAAA,YAAY,CAAC9C,OAAD,EAAUkD,GAAV,CAAZ,CAJgF,CAIpD;;AAE5B,UAAI,CAACxD,WAAW,CAACwD,GAAG,CAACf,IAAL,CAAhB,EAA4B;AAC1B,YAAIqC,YAAJ;;AAEAxE,QAAAA,OAAO,CAACiB,WAAR,CAAoB,eAAeY,MAAf,CAAsBM,IAAI,CAACgB,IAA3B,EAAiC,GAAjC,EAAsCtB,MAAtC,CAA6CsC,KAAK,CAAChB,IAAnD,EAAyD,GAAzD,EAA8DtB,MAA9D,CAAqE0C,OAArE,EAA8E,mBAA9E,IAAqG,iBAAiB1C,MAAjB,CAAwBnD,OAAO,CAACwE,GAAG,CAACf,IAAL,CAA/B,EAA2C,GAA3C,CAAzH,EAA0K,CAACqC,YAAY,GAAGtB,GAAG,CAACtB,OAApB,MAAiC,IAAjC,IAAyC4C,YAAY,KAAK,KAAK,CAA/D,GAAmE,KAAK,CAAxE,GAA4EA,YAAY,CAACrC,IAAnQ;AACD;AACF;AACF;AACF;;AAED,SAASwB,kBAAT,CAA4B3D,OAA5B,EAAqCmC,IAArC,EAA2C;AACzC,MAAIsC,cAAc,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAArB;;AAEA,OAAK,IAAIC,IAAI,GAAG,CAAX,EAAcC,oBAAoB,GAAG1C,IAAI,CAAC2C,aAAL,EAA1C,EAAgEF,IAAI,GAAGC,oBAAoB,CAACrE,MAA5F,EAAoGoE,IAAI,EAAxG,EAA4G;AAC1G,QAAIG,KAAK,GAAGF,oBAAoB,CAACD,IAAD,CAAhC;;AAEA,QAAI,CAACxF,eAAe,CAAC2F,KAAD,CAApB,EAA6B;AAC3B/E,MAAAA,OAAO,CAACiB,WAAR,CAAoB,QAAQY,MAAR,CAAenD,OAAO,CAACyD,IAAD,CAAtB,EAA8B,wCAA9B,IAA0E,uBAAuBN,MAAvB,CAA8BnD,OAAO,CAACqG,KAAD,CAArC,EAA8C,GAA9C,CAA9F,EAAkJC,8BAA8B,CAAC7C,IAAD,EAAO4C,KAAP,CAAhL;AACA;AACD;;AAED,QAAI5C,IAAI,KAAK4C,KAAb,EAAoB;AAClB/E,MAAAA,OAAO,CAACiB,WAAR,CAAoB,QAAQY,MAAR,CAAeM,IAAI,CAACgB,IAApB,EAA0B,wEAA1B,CAApB,EAAyH6B,8BAA8B,CAAC7C,IAAD,EAAO4C,KAAP,CAAvJ;AACA;AACD;;AAED,QAAIN,cAAc,CAACM,KAAK,CAAC5B,IAAP,CAAlB,EAAgC;AAC9BnD,MAAAA,OAAO,CAACiB,WAAR,CAAoB,QAAQY,MAAR,CAAeM,IAAI,CAACgB,IAApB,EAA0B,sBAA1B,EAAkDtB,MAAlD,CAAyDkD,KAAK,CAAC5B,IAA/D,EAAqE,QAArE,CAApB,EAAoG6B,8BAA8B,CAAC7C,IAAD,EAAO4C,KAAP,CAAlI;AACA;AACD;;AAEDN,IAAAA,cAAc,CAACM,KAAK,CAAC5B,IAAP,CAAd,GAA6B,IAA7B;AACA8B,IAAAA,+BAA+B,CAACjF,OAAD,EAAUmC,IAAV,EAAgB4C,KAAhB,CAA/B;AACAG,IAAAA,+BAA+B,CAAClF,OAAD,EAAUmC,IAAV,EAAgB4C,KAAhB,CAA/B;AACD;AACF;;AAED,SAASG,+BAAT,CAAyClF,OAAzC,EAAkDmC,IAAlD,EAAwD4C,KAAxD,EAA+D;AAC7D,MAAII,YAAY,GAAGhD,IAAI,CAAC6B,SAAL,EAAnB,CAD6D,CACxB;;AAErC,OAAK,IAAIoB,IAAI,GAAG,CAAX,EAAcC,cAAc,GAAG5G,YAAY,CAACsG,KAAK,CAACf,SAAN,EAAD,CAAhD,EAAqEoB,IAAI,GAAGC,cAAc,CAAC7E,MAA3F,EAAmG4E,IAAI,EAAvG,EAA2G;AACzG,QAAIE,UAAU,GAAGD,cAAc,CAACD,IAAD,CAA/B;AACA,QAAIG,SAAS,GAAGD,UAAU,CAACnC,IAA3B;AACA,QAAIqC,SAAS,GAAGL,YAAY,CAACI,SAAD,CAA5B,CAHyG,CAGhE;;AAEzC,QAAI,CAACC,SAAL,EAAgB;AACdxF,MAAAA,OAAO,CAACiB,WAAR,CAAoB,mBAAmBY,MAAnB,CAA0BkD,KAAK,CAAC5B,IAAhC,EAAsC,GAAtC,EAA2CtB,MAA3C,CAAkD0D,SAAlD,EAA6D,gBAA7D,EAA+E1D,MAA/E,CAAsFM,IAAI,CAACgB,IAA3F,EAAiG,uBAAjG,CAApB,EAA+I,CAACmC,UAAU,CAAC1D,OAAZ,EAAqBC,MAArB,CAA4BoC,WAAW,CAAC9B,IAAD,CAAvC,CAA/I;AACA;AACD,KARwG,CAQvG;AACF;;;AAGA,QAAI,CAACpD,eAAe,CAACiB,OAAO,CAACF,MAAT,EAAiB0F,SAAS,CAACrD,IAA3B,EAAiCmD,UAAU,CAACnD,IAA5C,CAApB,EAAuE;AACrEnC,MAAAA,OAAO,CAACiB,WAAR,CAAoB,mBAAmBY,MAAnB,CAA0BkD,KAAK,CAAC5B,IAAhC,EAAsC,GAAtC,EAA2CtB,MAA3C,CAAkD0D,SAAlD,EAA6D,gBAA7D,IAAiF,GAAG1D,MAAH,CAAUnD,OAAO,CAAC4G,UAAU,CAACnD,IAAZ,CAAjB,EAAoC,OAApC,EAA6CN,MAA7C,CAAoDM,IAAI,CAACgB,IAAzD,EAA+D,GAA/D,EAAoEtB,MAApE,CAA2E0D,SAA3E,EAAsF,GAAtF,CAAjF,GAA8K,WAAW1D,MAAX,CAAkBnD,OAAO,CAAC8G,SAAS,CAACrD,IAAX,CAAzB,EAA2C,GAA3C,CAAlM,EAAmP,CAACmD,UAAU,CAAC1D,OAAX,CAAmBO,IAApB,EAA0BqD,SAAS,CAAC5D,OAAV,CAAkBO,IAA5C,CAAnP;AACD,KAdwG,CAcvG;;;AAGF,QAAIsD,KAAK,GAAG,SAASA,KAAT,CAAeC,IAAf,EAAqBC,iBAArB,EAAwC;AAClD,UAAIC,QAAQ,GAAGD,iBAAiB,CAACD,IAAD,CAAhC;AACA,UAAInB,OAAO,GAAGqB,QAAQ,CAACzC,IAAvB;AACA,UAAI0C,OAAO,GAAGtH,IAAI,CAACiH,SAAS,CAACvC,IAAX,EAAiB,UAAUC,GAAV,EAAe;AAChD,eAAOA,GAAG,CAACC,IAAJ,KAAaoB,OAApB;AACD,OAFiB,CAAlB,CAHkD,CAK9C;;AAEJ,UAAI,CAACsB,OAAL,EAAc;AACZ7F,QAAAA,OAAO,CAACiB,WAAR,CAAoB,4BAA4BY,MAA5B,CAAmCkD,KAAK,CAAC5B,IAAzC,EAA+C,GAA/C,EAAoDtB,MAApD,CAA2D0D,SAA3D,EAAsE,GAAtE,EAA2E1D,MAA3E,CAAkF0C,OAAlF,EAA2F,kBAA3F,EAA+G1C,MAA/G,CAAsHM,IAAI,CAACgB,IAA3H,EAAiI,GAAjI,EAAsItB,MAAtI,CAA6I0D,SAA7I,EAAwJ,uBAAxJ,CAApB,EAAsM,CAACK,QAAQ,CAAChE,OAAV,EAAmB4D,SAAS,CAAC5D,OAA7B,CAAtM;AACA,eAAO,UAAP;AACD,OAViD,CAUhD;AACF;AACA;;;AAGA,UAAI,CAAC9C,WAAW,CAAC8G,QAAQ,CAACzD,IAAV,EAAgB0D,OAAO,CAAC1D,IAAxB,CAAhB,EAA+C;AAC7CnC,QAAAA,OAAO,CAACiB,WAAR,CAAoB,4BAA4BY,MAA5B,CAAmCkD,KAAK,CAAC5B,IAAzC,EAA+C,GAA/C,EAAoDtB,MAApD,CAA2D0D,SAA3D,EAAsE,GAAtE,EAA2E1D,MAA3E,CAAkF0C,OAAlF,EAA2F,KAA3F,IAAoG,gBAAgB1C,MAAhB,CAAuBnD,OAAO,CAACkH,QAAQ,CAACzD,IAAV,CAA9B,EAA+C,OAA/C,CAApG,GAA8J,GAAGN,MAAH,CAAUM,IAAI,CAACgB,IAAf,EAAqB,GAArB,EAA0BtB,MAA1B,CAAiC0D,SAAjC,EAA4C,GAA5C,EAAiD1D,MAAjD,CAAwD0C,OAAxD,EAAiE,aAAjE,CAA9J,GAAgP,GAAG1C,MAAH,CAAUnD,OAAO,CAACmH,OAAO,CAAC1D,IAAT,CAAjB,EAAiC,GAAjC,CAApQ,EAA2S,CAACyD,QAAQ,CAAChE,OAAT,CAAiBO,IAAlB,EAAwB0D,OAAO,CAACjE,OAAR,CAAgBO,IAAxC,CAA3S;AACD,OAjBiD,CAiBhD;;AAEH,KAnBD;;AAqBA,SAAK,IAAIuD,IAAI,GAAG,CAAX,EAAcC,iBAAiB,GAAGL,UAAU,CAACrC,IAAlD,EAAwDyC,IAAI,GAAGC,iBAAiB,CAACnF,MAAjF,EAAyFkF,IAAI,EAA7F,EAAiG;AAC/F,UAAII,IAAI,GAAGL,KAAK,CAACC,IAAD,EAAOC,iBAAP,CAAhB;;AAEA,UAAIG,IAAI,KAAK,UAAb,EAAyB;AAC1B,KA1CwG,CA0CvG;;;AAGF,QAAIC,MAAM,GAAG,SAASA,MAAT,CAAgBC,IAAhB,EAAsBC,gBAAtB,EAAwC;AACnD,UAAIJ,OAAO,GAAGI,gBAAgB,CAACD,IAAD,CAA9B;AACA,UAAIzB,OAAO,GAAGsB,OAAO,CAAC1C,IAAtB;AACA,UAAIyC,QAAQ,GAAGrH,IAAI,CAAC+G,UAAU,CAACrC,IAAZ,EAAkB,UAAUC,GAAV,EAAe;AAClD,eAAOA,GAAG,CAACC,IAAJ,KAAaoB,OAApB;AACD,OAFkB,CAAnB;;AAIA,UAAI,CAACqB,QAAD,IAAahG,kBAAkB,CAACiG,OAAD,CAAnC,EAA8C;AAC5C7F,QAAAA,OAAO,CAACiB,WAAR,CAAoB,gBAAgBY,MAAhB,CAAuBM,IAAI,CAACgB,IAA5B,EAAkC,GAAlC,EAAuCtB,MAAvC,CAA8C0D,SAA9C,EAAyD,8BAAzD,EAAyF1D,MAAzF,CAAgG0C,OAAhG,EAAyG,4CAAzG,EAAuJ1C,MAAvJ,CAA8JkD,KAAK,CAAC5B,IAApK,EAA0K,GAA1K,EAA+KtB,MAA/K,CAAsL0D,SAAtL,EAAiM,GAAjM,CAApB,EAA2N,CAACM,OAAO,CAACjE,OAAT,EAAkB0D,UAAU,CAAC1D,OAA7B,CAA3N;AACD;AACF,KAVD;;AAYA,SAAK,IAAIoE,IAAI,GAAG,CAAX,EAAcC,gBAAgB,GAAGT,SAAS,CAACvC,IAAhD,EAAsD+C,IAAI,GAAGC,gBAAgB,CAACzF,MAA9E,EAAsFwF,IAAI,EAA1F,EAA8F;AAC5FD,MAAAA,MAAM,CAACC,IAAD,EAAOC,gBAAP,CAAN;AACD;AACF;AACF;;AAED,SAAShB,+BAAT,CAAyCjF,OAAzC,EAAkDmC,IAAlD,EAAwD4C,KAAxD,EAA+D;AAC7D,MAAImB,eAAe,GAAG/D,IAAI,CAAC2C,aAAL,EAAtB;;AAEA,OAAK,IAAIqB,IAAI,GAAG,CAAX,EAAcC,qBAAqB,GAAGrB,KAAK,CAACD,aAAN,EAA3C,EAAkEqB,IAAI,GAAGC,qBAAqB,CAAC5F,MAA/F,EAAuG2F,IAAI,EAA3G,EAA+G;AAC7G,QAAIE,UAAU,GAAGD,qBAAqB,CAACD,IAAD,CAAtC;;AAEA,QAAID,eAAe,CAACI,OAAhB,CAAwBD,UAAxB,MAAwC,CAAC,CAA7C,EAAgD;AAC9CrG,MAAAA,OAAO,CAACiB,WAAR,CAAoBoF,UAAU,KAAKlE,IAAf,GAAsB,QAAQN,MAAR,CAAeM,IAAI,CAACgB,IAApB,EAA0B,oBAA1B,EAAgDtB,MAAhD,CAAuDkD,KAAK,CAAC5B,IAA7D,EAAmE,gDAAnE,CAAtB,GAA6I,QAAQtB,MAAR,CAAeM,IAAI,CAACgB,IAApB,EAA0B,kBAA1B,EAA8CtB,MAA9C,CAAqDwE,UAAU,CAAClD,IAAhE,EAAsE,gCAAtE,EAAwGtB,MAAxG,CAA+GkD,KAAK,CAAC5B,IAArH,EAA2H,GAA3H,CAAjK,EAAkS,GAAGtB,MAAH,CAAUmD,8BAA8B,CAACD,KAAD,EAAQsB,UAAR,CAAxC,EAA6DrB,8BAA8B,CAAC7C,IAAD,EAAO4C,KAAP,CAA3F,CAAlS;AACD;AACF;AACF;;AAED,SAASnB,oBAAT,CAA8B5D,OAA9B,EAAuCuG,KAAvC,EAA8C;AAC5C,MAAIC,WAAW,GAAGD,KAAK,CAACE,QAAN,EAAlB;;AAEA,MAAID,WAAW,CAAChG,MAAZ,KAAuB,CAA3B,EAA8B;AAC5BR,IAAAA,OAAO,CAACiB,WAAR,CAAoB,cAAcY,MAAd,CAAqB0E,KAAK,CAACpD,IAA3B,EAAiC,wCAAjC,CAApB,EAAgGc,WAAW,CAACsC,KAAD,CAA3G;AACD;;AAED,MAAIG,iBAAiB,GAAGhC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAxB;;AAEA,OAAK,IAAIgC,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGH,WAAW,CAAChG,MAAtC,EAA8CmG,IAAI,EAAlD,EAAsD;AACpD,QAAIC,UAAU,GAAGJ,WAAW,CAACG,IAAD,CAA5B;;AAEA,QAAID,iBAAiB,CAACE,UAAU,CAACzD,IAAZ,CAArB,EAAwC;AACtCnD,MAAAA,OAAO,CAACiB,WAAR,CAAoB,cAAcY,MAAd,CAAqB0E,KAAK,CAACpD,IAA3B,EAAiC,yBAAjC,EAA4DtB,MAA5D,CAAmE+E,UAAU,CAACzD,IAA9E,EAAoF,QAApF,CAApB,EAAmH0D,uBAAuB,CAACN,KAAD,EAAQK,UAAU,CAACzD,IAAnB,CAA1I;AACA;AACD;;AAEDuD,IAAAA,iBAAiB,CAACE,UAAU,CAACzD,IAAZ,CAAjB,GAAqC,IAArC;;AAEA,QAAI,CAAChE,YAAY,CAACyH,UAAD,CAAjB,EAA+B;AAC7B5G,MAAAA,OAAO,CAACiB,WAAR,CAAoB,cAAcY,MAAd,CAAqB0E,KAAK,CAACpD,IAA3B,EAAiC,kCAAjC,IAAuE,qBAAqBtB,MAArB,CAA4BnD,OAAO,CAACkI,UAAD,CAAnC,EAAiD,GAAjD,CAA3F,EAAkJC,uBAAuB,CAACN,KAAD,EAAQO,MAAM,CAACF,UAAD,CAAd,CAAzK;AACD;AACF;AACF;;AAED,SAAS/C,kBAAT,CAA4B7D,OAA5B,EAAqC+G,QAArC,EAA+C;AAC7C,MAAIC,UAAU,GAAGD,QAAQ,CAACE,SAAT,EAAjB;;AAEA,MAAID,UAAU,CAACxG,MAAX,KAAsB,CAA1B,EAA6B;AAC3BR,IAAAA,OAAO,CAACiB,WAAR,CAAoB,aAAaY,MAAb,CAAoBkF,QAAQ,CAAC5D,IAA7B,EAAmC,kCAAnC,CAApB,EAA4Fc,WAAW,CAAC8C,QAAD,CAAvG;AACD;;AAED,OAAK,IAAIG,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGF,UAAU,CAACxG,MAArC,EAA6C0G,IAAI,EAAjD,EAAqD;AACnD,QAAIC,SAAS,GAAGH,UAAU,CAACE,IAAD,CAA1B;AACA,QAAIE,SAAS,GAAGD,SAAS,CAAChE,IAA1B,CAFmD,CAEnB;;AAEhCL,IAAAA,YAAY,CAAC9C,OAAD,EAAUmH,SAAV,CAAZ;;AAEA,QAAIC,SAAS,KAAK,MAAd,IAAwBA,SAAS,KAAK,OAAtC,IAAiDA,SAAS,KAAK,MAAnE,EAA2E;AACzEpH,MAAAA,OAAO,CAACiB,WAAR,CAAoB,aAAaY,MAAb,CAAoBkF,QAAQ,CAAC5D,IAA7B,EAAmC,yBAAnC,EAA8DtB,MAA9D,CAAqEuF,SAArE,EAAgF,GAAhF,CAApB,EAA0GD,SAAS,CAACvF,OAApH;AACD;AACF;AACF;;AAED,SAASkC,mBAAT,CAA6B9D,OAA7B,EAAsCqH,QAAtC,EAAgD;AAC9C,MAAItD,MAAM,GAAGtF,YAAY,CAAC4I,QAAQ,CAACrD,SAAT,EAAD,CAAzB;;AAEA,MAAID,MAAM,CAACvD,MAAP,KAAkB,CAAtB,EAAyB;AACvBR,IAAAA,OAAO,CAACiB,WAAR,CAAoB,qBAAqBY,MAArB,CAA4BwF,QAAQ,CAAClE,IAArC,EAA2C,kCAA3C,CAApB,EAAoGc,WAAW,CAACoD,QAAD,CAA/G;AACD,GAL6C,CAK5C;;;AAGF,OAAK,IAAIC,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGvD,MAAM,CAACvD,MAAjC,EAAyC8G,IAAI,EAA7C,EAAiD;AAC/C,QAAInD,KAAK,GAAGJ,MAAM,CAACuD,IAAD,CAAlB,CAD+C,CAE/C;;AACAxE,IAAAA,YAAY,CAAC9C,OAAD,EAAUmE,KAAV,CAAZ,CAH+C,CAGjB;;AAE9B,QAAI,CAACzE,WAAW,CAACyE,KAAK,CAAChC,IAAP,CAAhB,EAA8B;AAC5B,UAAIoF,eAAJ;;AAEAvH,MAAAA,OAAO,CAACiB,WAAR,CAAoB,eAAeY,MAAf,CAAsBwF,QAAQ,CAAClE,IAA/B,EAAqC,GAArC,EAA0CtB,MAA1C,CAAiDsC,KAAK,CAAChB,IAAvD,EAA6D,sBAA7D,IAAuF,YAAYtB,MAAZ,CAAmBnD,OAAO,CAACyF,KAAK,CAAChC,IAAP,CAA1B,EAAwC,GAAxC,CAA3G,EAAyJ,CAACoF,eAAe,GAAGpD,KAAK,CAACvC,OAAzB,MAAsC,IAAtC,IAA8C2F,eAAe,KAAK,KAAK,CAAvE,GAA2E,KAAK,CAAhF,GAAoFA,eAAe,CAACpF,IAA7P;AACD;AACF;AACF;;AAED,SAASkB,sCAAT,CAAgDrD,OAAhD,EAAyD;AACvD;AACA;AACA;AACA,MAAIwH,YAAY,GAAG9C,MAAM,CAACC,MAAP,CAAc,IAAd,CAAnB,CAJuD,CAIf;;AAExC,MAAI8C,SAAS,GAAG,EAAhB,CANuD,CAMnC;;AAEpB,MAAIC,wBAAwB,GAAGhD,MAAM,CAACC,MAAP,CAAc,IAAd,CAA/B;AACA,SAAOgD,oBAAP,CATuD,CAS1B;AAC7B;AACA;;AAEA,WAASA,oBAAT,CAA8BN,QAA9B,EAAwC;AACtC,QAAIG,YAAY,CAACH,QAAQ,CAAClE,IAAV,CAAhB,EAAiC;AAC/B;AACD;;AAEDqE,IAAAA,YAAY,CAACH,QAAQ,CAAClE,IAAV,CAAZ,GAA8B,IAA9B;AACAuE,IAAAA,wBAAwB,CAACL,QAAQ,CAAClE,IAAV,CAAxB,GAA0CsE,SAAS,CAACjH,MAApD;AACA,QAAIuD,MAAM,GAAGtF,YAAY,CAAC4I,QAAQ,CAACrD,SAAT,EAAD,CAAzB;;AAEA,SAAK,IAAI4D,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAG7D,MAAM,CAACvD,MAAjC,EAAyCoH,IAAI,EAA7C,EAAiD;AAC/C,UAAIzD,KAAK,GAAGJ,MAAM,CAAC6D,IAAD,CAAlB;;AAEA,UAAInI,aAAa,CAAC0E,KAAK,CAAChC,IAAP,CAAb,IAA6B5C,iBAAiB,CAAC4E,KAAK,CAAChC,IAAN,CAAW0F,MAAZ,CAAlD,EAAuE;AACrE,YAAIC,SAAS,GAAG3D,KAAK,CAAChC,IAAN,CAAW0F,MAA3B;AACA,YAAIE,UAAU,GAAGL,wBAAwB,CAACI,SAAS,CAAC3E,IAAX,CAAzC;AACAsE,QAAAA,SAAS,CAAChG,IAAV,CAAe0C,KAAf;;AAEA,YAAI4D,UAAU,KAAKC,SAAnB,EAA8B;AAC5BL,UAAAA,oBAAoB,CAACG,SAAD,CAApB;AACD,SAFD,MAEO;AACL,cAAIG,SAAS,GAAGR,SAAS,CAACS,KAAV,CAAgBH,UAAhB,CAAhB;AACA,cAAII,OAAO,GAAGF,SAAS,CAACvH,GAAV,CAAc,UAAU0H,QAAV,EAAoB;AAC9C,mBAAOA,QAAQ,CAACjF,IAAhB;AACD,WAFa,EAEXtC,IAFW,CAEN,GAFM,CAAd;AAGAb,UAAAA,OAAO,CAACiB,WAAR,CAAoB,mCAAmCY,MAAnC,CAA0CiG,SAAS,CAAC3E,IAApD,EAA0D,0DAA1D,EAAsHtB,MAAtH,CAA6HsG,OAA7H,EAAsI,KAAtI,CAApB,EAAkKF,SAAS,CAACvH,GAAV,CAAc,UAAU0H,QAAV,EAAoB;AAClM,mBAAOA,QAAQ,CAACxG,OAAhB;AACD,WAFiK,CAAlK;AAGD;;AAED6F,QAAAA,SAAS,CAACY,GAAV;AACD;AACF;;AAEDX,IAAAA,wBAAwB,CAACL,QAAQ,CAAClE,IAAV,CAAxB,GAA0C6E,SAA1C;AACD;AACF;;AAED,SAAS/D,WAAT,CAAqBqE,MAArB,EAA6B;AAC3B,MAAI1G,OAAO,GAAG0G,MAAM,CAAC1G,OAArB;AAAA,MACI2G,iBAAiB,GAAGD,MAAM,CAACC,iBAD/B;AAEA,SAAO3G,OAAO,GAAG2G,iBAAiB,GAAG,CAAC3G,OAAD,EAAUC,MAAV,CAAiB0G,iBAAjB,CAAH,GAAyC,CAAC3G,OAAD,CAA7D,GAAyE2G,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK,KAAK,CAAzD,GAA6DA,iBAA7D,GAAiF,EAAxK;AACD;;AAED,SAASjG,cAAT,CAAwBgG,MAAxB,EAAgCE,MAAhC,EAAwC;AACtC;AACA,SAAOhK,OAAO,CAACyF,WAAW,CAACqE,MAAD,CAAZ,EAAsB,UAAUG,IAAV,EAAgB;AAClD,QAAIC,OAAJ;;AAEA,WAAO,CAACA,OAAO,GAAGF,MAAM,CAACC,IAAD,CAAjB,MAA6B,IAA7B,IAAqCC,OAAO,KAAK,KAAK,CAAtD,GAA0DA,OAA1D,GAAoE,EAA3E;AACD,GAJa,CAAd;AAKD;;AAED,SAAS1D,8BAAT,CAAwC7C,IAAxC,EAA8C4C,KAA9C,EAAqD;AACnD,SAAOzC,cAAc,CAACH,IAAD,EAAO,UAAUwG,QAAV,EAAoB;AAC9C,WAAOA,QAAQ,CAACC,UAAhB;AACD,GAFoB,CAAd,CAEJtH,MAFI,CAEG,UAAUuH,SAAV,EAAqB;AAC7B,WAAOA,SAAS,CAAC1F,IAAV,CAAe2F,KAAf,KAAyB/D,KAAK,CAAC5B,IAAtC;AACD,GAJM,CAAP;AAKD;;AAED,SAAS0D,uBAAT,CAAiCN,KAAjC,EAAwCwC,QAAxC,EAAkD;AAChD,SAAOzG,cAAc,CAACiE,KAAD,EAAQ,UAAUyC,SAAV,EAAqB;AAChD,WAAOA,SAAS,CAACC,KAAjB;AACD,GAFoB,CAAd,CAEJ3H,MAFI,CAEG,UAAUqH,QAAV,EAAoB;AAC5B,WAAOA,QAAQ,CAACxF,IAAT,CAAc2F,KAAd,KAAwBC,QAA/B;AACD,GAJM,CAAP;AAKD","sourcesContent":["import find from \"../polyfills/find.mjs\";\nimport flatMap from \"../polyfills/flatMap.mjs\";\nimport objectValues from \"../polyfills/objectValues.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { locatedError } from \"../error/locatedError.mjs\";\nimport { isValidNameError } from \"../utilities/assertValidName.mjs\";\nimport { isEqualType, isTypeSubTypeOf } from \"../utilities/typeComparators.mjs\";\nimport { isDirective } from \"./directives.mjs\";\nimport { isIntrospectionType } from \"./introspection.mjs\";\nimport { assertSchema } from \"./schema.mjs\";\nimport { isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isNamedType, isNonNullType, isInputType, isOutputType, isRequiredArgument } from \"./definition.mjs\";\n/**\n * Implements the \"Type Validation\" sub-sections of the specification's\n * \"Type System\" section.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the Schema is valid.\n */\n\nexport function validateSchema(schema) {\n  // First check to ensure the provided value is in fact a GraphQLSchema.\n  assertSchema(schema); // If this Schema has already been validated, return the previous results.\n\n  if (schema.__validationErrors) {\n    return schema.__validationErrors;\n  } // Validate the schema, producing a list of errors.\n\n\n  var context = new SchemaValidationContext(schema);\n  validateRootTypes(context);\n  validateDirectives(context);\n  validateTypes(context); // Persist the results of validation before returning to ensure validation\n  // does not run multiple times for this schema.\n\n  var errors = context.getErrors();\n  schema.__validationErrors = errors;\n  return errors;\n}\n/**\n * Utility function which asserts a schema is valid by throwing an error if\n * it is invalid.\n */\n\nexport function assertValidSchema(schema) {\n  var errors = validateSchema(schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}\n\nvar SchemaValidationContext = /*#__PURE__*/function () {\n  function SchemaValidationContext(schema) {\n    this._errors = [];\n    this.schema = schema;\n  }\n\n  var _proto = SchemaValidationContext.prototype;\n\n  _proto.reportError = function reportError(message, nodes) {\n    var _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;\n\n    this.addError(new GraphQLError(message, _nodes));\n  };\n\n  _proto.addError = function addError(error) {\n    this._errors.push(error);\n  };\n\n  _proto.getErrors = function getErrors() {\n    return this._errors;\n  };\n\n  return SchemaValidationContext;\n}();\n\nfunction validateRootTypes(context) {\n  var schema = context.schema;\n  var queryType = schema.getQueryType();\n\n  if (!queryType) {\n    context.reportError('Query root type must be provided.', schema.astNode);\n  } else if (!isObjectType(queryType)) {\n    context.reportError(\"Query root type must be Object type, it cannot be \".concat(inspect(queryType), \".\"), getOperationTypeNode(schema, queryType, 'query'));\n  }\n\n  var mutationType = schema.getMutationType();\n\n  if (mutationType && !isObjectType(mutationType)) {\n    context.reportError('Mutation root type must be Object type if provided, it cannot be ' + \"\".concat(inspect(mutationType), \".\"), getOperationTypeNode(schema, mutationType, 'mutation'));\n  }\n\n  var subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && !isObjectType(subscriptionType)) {\n    context.reportError('Subscription root type must be Object type if provided, it cannot be ' + \"\".concat(inspect(subscriptionType), \".\"), getOperationTypeNode(schema, subscriptionType, 'subscription'));\n  }\n}\n\nfunction getOperationTypeNode(schema, type, operation) {\n  var operationNodes = getAllSubNodes(schema, function (node) {\n    return node.operationTypes;\n  });\n\n  for (var _i2 = 0; _i2 < operationNodes.length; _i2++) {\n    var node = operationNodes[_i2];\n\n    if (node.operation === operation) {\n      return node.type;\n    }\n  }\n\n  return type.astNode;\n}\n\nfunction validateDirectives(context) {\n  for (var _i4 = 0, _context$schema$getDi2 = context.schema.getDirectives(); _i4 < _context$schema$getDi2.length; _i4++) {\n    var directive = _context$schema$getDi2[_i4];\n\n    // Ensure all directives are in fact GraphQL directives.\n    if (!isDirective(directive)) {\n      context.reportError(\"Expected directive but got: \".concat(inspect(directive), \".\"), directive === null || directive === void 0 ? void 0 : directive.astNode);\n      continue;\n    } // Ensure they are named correctly.\n\n\n    validateName(context, directive); // TODO: Ensure proper locations.\n    // Ensure the arguments are valid.\n\n    for (var _i6 = 0, _directive$args2 = directive.args; _i6 < _directive$args2.length; _i6++) {\n      var arg = _directive$args2[_i6];\n      // Ensure they are named correctly.\n      validateName(context, arg); // Ensure the type is an input type.\n\n      if (!isInputType(arg.type)) {\n        context.reportError(\"The type of @\".concat(directive.name, \"(\").concat(arg.name, \":) must be Input Type \") + \"but got: \".concat(inspect(arg.type), \".\"), arg.astNode);\n      }\n    }\n  }\n}\n\nfunction validateName(context, node) {\n  // Ensure names are valid, however introspection types opt out.\n  var error = isValidNameError(node.name);\n\n  if (error) {\n    context.addError(locatedError(error, node.astNode));\n  }\n}\n\nfunction validateTypes(context) {\n  var validateInputObjectCircularRefs = createInputObjectCircularRefsValidator(context);\n  var typeMap = context.schema.getTypeMap();\n\n  for (var _i8 = 0, _objectValues2 = objectValues(typeMap); _i8 < _objectValues2.length; _i8++) {\n    var type = _objectValues2[_i8];\n\n    // Ensure all provided types are in fact GraphQL type.\n    if (!isNamedType(type)) {\n      context.reportError(\"Expected GraphQL named type but got: \".concat(inspect(type), \".\"), type.astNode);\n      continue;\n    } // Ensure it is named correctly (excluding introspection types).\n\n\n    if (!isIntrospectionType(type)) {\n      validateName(context, type);\n    }\n\n    if (isObjectType(type)) {\n      // Ensure fields are valid\n      validateFields(context, type); // Ensure objects implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if (isInterfaceType(type)) {\n      // Ensure fields are valid.\n      validateFields(context, type); // Ensure interfaces implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if (isUnionType(type)) {\n      // Ensure Unions include valid member types.\n      validateUnionMembers(context, type);\n    } else if (isEnumType(type)) {\n      // Ensure Enums have valid values.\n      validateEnumValues(context, type);\n    } else if (isInputObjectType(type)) {\n      // Ensure Input Object fields are valid.\n      validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references\n\n      validateInputObjectCircularRefs(type);\n    }\n  }\n}\n\nfunction validateFields(context, type) {\n  var fields = objectValues(type.getFields()); // Objects and Interfaces both must define one or more fields.\n\n  if (fields.length === 0) {\n    context.reportError(\"Type \".concat(type.name, \" must define one or more fields.\"), getAllNodes(type));\n  }\n\n  for (var _i10 = 0; _i10 < fields.length; _i10++) {\n    var field = fields[_i10];\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an output type\n\n    if (!isOutputType(field.type)) {\n      var _field$astNode;\n\n      context.reportError(\"The type of \".concat(type.name, \".\").concat(field.name, \" must be Output Type \") + \"but got: \".concat(inspect(field.type), \".\"), (_field$astNode = field.astNode) === null || _field$astNode === void 0 ? void 0 : _field$astNode.type);\n    } // Ensure the arguments are valid\n\n\n    for (var _i12 = 0, _field$args2 = field.args; _i12 < _field$args2.length; _i12++) {\n      var arg = _field$args2[_i12];\n      var argName = arg.name; // Ensure they are named correctly.\n\n      validateName(context, arg); // Ensure the type is an input type\n\n      if (!isInputType(arg.type)) {\n        var _arg$astNode;\n\n        context.reportError(\"The type of \".concat(type.name, \".\").concat(field.name, \"(\").concat(argName, \":) must be Input \") + \"Type but got: \".concat(inspect(arg.type), \".\"), (_arg$astNode = arg.astNode) === null || _arg$astNode === void 0 ? void 0 : _arg$astNode.type);\n      }\n    }\n  }\n}\n\nfunction validateInterfaces(context, type) {\n  var ifaceTypeNames = Object.create(null);\n\n  for (var _i14 = 0, _type$getInterfaces2 = type.getInterfaces(); _i14 < _type$getInterfaces2.length; _i14++) {\n    var iface = _type$getInterfaces2[_i14];\n\n    if (!isInterfaceType(iface)) {\n      context.reportError(\"Type \".concat(inspect(type), \" must only implement Interface types, \") + \"it cannot implement \".concat(inspect(iface), \".\"), getAllImplementsInterfaceNodes(type, iface));\n      continue;\n    }\n\n    if (type === iface) {\n      context.reportError(\"Type \".concat(type.name, \" cannot implement itself because it would create a circular reference.\"), getAllImplementsInterfaceNodes(type, iface));\n      continue;\n    }\n\n    if (ifaceTypeNames[iface.name]) {\n      context.reportError(\"Type \".concat(type.name, \" can only implement \").concat(iface.name, \" once.\"), getAllImplementsInterfaceNodes(type, iface));\n      continue;\n    }\n\n    ifaceTypeNames[iface.name] = true;\n    validateTypeImplementsAncestors(context, type, iface);\n    validateTypeImplementsInterface(context, type, iface);\n  }\n}\n\nfunction validateTypeImplementsInterface(context, type, iface) {\n  var typeFieldMap = type.getFields(); // Assert each interface field is implemented.\n\n  for (var _i16 = 0, _objectValues4 = objectValues(iface.getFields()); _i16 < _objectValues4.length; _i16++) {\n    var ifaceField = _objectValues4[_i16];\n    var fieldName = ifaceField.name;\n    var typeField = typeFieldMap[fieldName]; // Assert interface field exists on type.\n\n    if (!typeField) {\n      context.reportError(\"Interface field \".concat(iface.name, \".\").concat(fieldName, \" expected but \").concat(type.name, \" does not provide it.\"), [ifaceField.astNode].concat(getAllNodes(type)));\n      continue;\n    } // Assert interface field type is satisfied by type field type, by being\n    // a valid subtype. (covariant)\n\n\n    if (!isTypeSubTypeOf(context.schema, typeField.type, ifaceField.type)) {\n      context.reportError(\"Interface field \".concat(iface.name, \".\").concat(fieldName, \" expects type \") + \"\".concat(inspect(ifaceField.type), \" but \").concat(type.name, \".\").concat(fieldName, \" \") + \"is type \".concat(inspect(typeField.type), \".\"), [ifaceField.astNode.type, typeField.astNode.type]);\n    } // Assert each interface field arg is implemented.\n\n\n    var _loop = function _loop(_i18, _ifaceField$args2) {\n      var ifaceArg = _ifaceField$args2[_i18];\n      var argName = ifaceArg.name;\n      var typeArg = find(typeField.args, function (arg) {\n        return arg.name === argName;\n      }); // Assert interface field arg exists on object field.\n\n      if (!typeArg) {\n        context.reportError(\"Interface field argument \".concat(iface.name, \".\").concat(fieldName, \"(\").concat(argName, \":) expected but \").concat(type.name, \".\").concat(fieldName, \" does not provide it.\"), [ifaceArg.astNode, typeField.astNode]);\n        return \"continue\";\n      } // Assert interface field arg type matches object field arg type.\n      // (invariant)\n      // TODO: change to contravariant?\n\n\n      if (!isEqualType(ifaceArg.type, typeArg.type)) {\n        context.reportError(\"Interface field argument \".concat(iface.name, \".\").concat(fieldName, \"(\").concat(argName, \":) \") + \"expects type \".concat(inspect(ifaceArg.type), \" but \") + \"\".concat(type.name, \".\").concat(fieldName, \"(\").concat(argName, \":) is type \") + \"\".concat(inspect(typeArg.type), \".\"), [ifaceArg.astNode.type, typeArg.astNode.type]);\n      } // TODO: validate default values?\n\n    };\n\n    for (var _i18 = 0, _ifaceField$args2 = ifaceField.args; _i18 < _ifaceField$args2.length; _i18++) {\n      var _ret = _loop(_i18, _ifaceField$args2);\n\n      if (_ret === \"continue\") continue;\n    } // Assert additional arguments must not be required.\n\n\n    var _loop2 = function _loop2(_i20, _typeField$args2) {\n      var typeArg = _typeField$args2[_i20];\n      var argName = typeArg.name;\n      var ifaceArg = find(ifaceField.args, function (arg) {\n        return arg.name === argName;\n      });\n\n      if (!ifaceArg && isRequiredArgument(typeArg)) {\n        context.reportError(\"Object field \".concat(type.name, \".\").concat(fieldName, \" includes required argument \").concat(argName, \" that is missing from the Interface field \").concat(iface.name, \".\").concat(fieldName, \".\"), [typeArg.astNode, ifaceField.astNode]);\n      }\n    };\n\n    for (var _i20 = 0, _typeField$args2 = typeField.args; _i20 < _typeField$args2.length; _i20++) {\n      _loop2(_i20, _typeField$args2);\n    }\n  }\n}\n\nfunction validateTypeImplementsAncestors(context, type, iface) {\n  var ifaceInterfaces = type.getInterfaces();\n\n  for (var _i22 = 0, _iface$getInterfaces2 = iface.getInterfaces(); _i22 < _iface$getInterfaces2.length; _i22++) {\n    var transitive = _iface$getInterfaces2[_i22];\n\n    if (ifaceInterfaces.indexOf(transitive) === -1) {\n      context.reportError(transitive === type ? \"Type \".concat(type.name, \" cannot implement \").concat(iface.name, \" because it would create a circular reference.\") : \"Type \".concat(type.name, \" must implement \").concat(transitive.name, \" because it is implemented by \").concat(iface.name, \".\"), [].concat(getAllImplementsInterfaceNodes(iface, transitive), getAllImplementsInterfaceNodes(type, iface)));\n    }\n  }\n}\n\nfunction validateUnionMembers(context, union) {\n  var memberTypes = union.getTypes();\n\n  if (memberTypes.length === 0) {\n    context.reportError(\"Union type \".concat(union.name, \" must define one or more member types.\"), getAllNodes(union));\n  }\n\n  var includedTypeNames = Object.create(null);\n\n  for (var _i24 = 0; _i24 < memberTypes.length; _i24++) {\n    var memberType = memberTypes[_i24];\n\n    if (includedTypeNames[memberType.name]) {\n      context.reportError(\"Union type \".concat(union.name, \" can only include type \").concat(memberType.name, \" once.\"), getUnionMemberTypeNodes(union, memberType.name));\n      continue;\n    }\n\n    includedTypeNames[memberType.name] = true;\n\n    if (!isObjectType(memberType)) {\n      context.reportError(\"Union type \".concat(union.name, \" can only include Object types, \") + \"it cannot include \".concat(inspect(memberType), \".\"), getUnionMemberTypeNodes(union, String(memberType)));\n    }\n  }\n}\n\nfunction validateEnumValues(context, enumType) {\n  var enumValues = enumType.getValues();\n\n  if (enumValues.length === 0) {\n    context.reportError(\"Enum type \".concat(enumType.name, \" must define one or more values.\"), getAllNodes(enumType));\n  }\n\n  for (var _i26 = 0; _i26 < enumValues.length; _i26++) {\n    var enumValue = enumValues[_i26];\n    var valueName = enumValue.name; // Ensure valid name.\n\n    validateName(context, enumValue);\n\n    if (valueName === 'true' || valueName === 'false' || valueName === 'null') {\n      context.reportError(\"Enum type \".concat(enumType.name, \" cannot include value: \").concat(valueName, \".\"), enumValue.astNode);\n    }\n  }\n}\n\nfunction validateInputFields(context, inputObj) {\n  var fields = objectValues(inputObj.getFields());\n\n  if (fields.length === 0) {\n    context.reportError(\"Input Object type \".concat(inputObj.name, \" must define one or more fields.\"), getAllNodes(inputObj));\n  } // Ensure the arguments are valid\n\n\n  for (var _i28 = 0; _i28 < fields.length; _i28++) {\n    var field = fields[_i28];\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an input type\n\n    if (!isInputType(field.type)) {\n      var _field$astNode2;\n\n      context.reportError(\"The type of \".concat(inputObj.name, \".\").concat(field.name, \" must be Input Type \") + \"but got: \".concat(inspect(field.type), \".\"), (_field$astNode2 = field.astNode) === null || _field$astNode2 === void 0 ? void 0 : _field$astNode2.type);\n    }\n  }\n}\n\nfunction createInputObjectCircularRefsValidator(context) {\n  // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.\n  // Tracks already visited types to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  var visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors\n\n  var fieldPath = []; // Position in the type path\n\n  var fieldPathIndexByTypeName = Object.create(null);\n  return detectCycleRecursive; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(inputObj) {\n    if (visitedTypes[inputObj.name]) {\n      return;\n    }\n\n    visitedTypes[inputObj.name] = true;\n    fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;\n    var fields = objectValues(inputObj.getFields());\n\n    for (var _i30 = 0; _i30 < fields.length; _i30++) {\n      var field = fields[_i30];\n\n      if (isNonNullType(field.type) && isInputObjectType(field.type.ofType)) {\n        var fieldType = field.type.ofType;\n        var cycleIndex = fieldPathIndexByTypeName[fieldType.name];\n        fieldPath.push(field);\n\n        if (cycleIndex === undefined) {\n          detectCycleRecursive(fieldType);\n        } else {\n          var cyclePath = fieldPath.slice(cycleIndex);\n          var pathStr = cyclePath.map(function (fieldObj) {\n            return fieldObj.name;\n          }).join('.');\n          context.reportError(\"Cannot reference Input Object \\\"\".concat(fieldType.name, \"\\\" within itself through a series of non-null fields: \\\"\").concat(pathStr, \"\\\".\"), cyclePath.map(function (fieldObj) {\n            return fieldObj.astNode;\n          }));\n        }\n\n        fieldPath.pop();\n      }\n    }\n\n    fieldPathIndexByTypeName[inputObj.name] = undefined;\n  }\n}\n\nfunction getAllNodes(object) {\n  var astNode = object.astNode,\n      extensionASTNodes = object.extensionASTNodes;\n  return astNode ? extensionASTNodes ? [astNode].concat(extensionASTNodes) : [astNode] : extensionASTNodes !== null && extensionASTNodes !== void 0 ? extensionASTNodes : [];\n}\n\nfunction getAllSubNodes(object, getter) {\n  /* istanbul ignore next (See https://github.com/graphql/graphql-js/issues/2203) */\n  return flatMap(getAllNodes(object), function (item) {\n    var _getter;\n\n    return (_getter = getter(item)) !== null && _getter !== void 0 ? _getter : [];\n  });\n}\n\nfunction getAllImplementsInterfaceNodes(type, iface) {\n  return getAllSubNodes(type, function (typeNode) {\n    return typeNode.interfaces;\n  }).filter(function (ifaceNode) {\n    return ifaceNode.name.value === iface.name;\n  });\n}\n\nfunction getUnionMemberTypeNodes(union, typeName) {\n  return getAllSubNodes(union, function (unionNode) {\n    return unionNode.types;\n  }).filter(function (typeNode) {\n    return typeNode.name.value === typeName;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}