{"ast":null,"code":"function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n} // FIXME\n\n/* eslint-disable import/no-cycle */\n\n\nimport objectEntries from \"../polyfills/objectEntries.mjs\";\nimport { SYMBOL_TO_STRING_TAG } from \"../polyfills/symbols.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport keyMap from \"../jsutils/keyMap.mjs\";\nimport mapValue from \"../jsutils/mapValue.mjs\";\nimport toObjMap from \"../jsutils/toObjMap.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport keyValMap from \"../jsutils/keyValMap.mjs\";\nimport instanceOf from \"../jsutils/instanceOf.mjs\";\nimport didYouMean from \"../jsutils/didYouMean.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport identityFunc from \"../jsutils/identityFunc.mjs\";\nimport defineToJSON from \"../jsutils/defineToJSON.mjs\";\nimport suggestionList from \"../jsutils/suggestionList.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { print } from \"../language/printer.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { valueFromASTUntyped } from \"../utilities/valueFromASTUntyped.mjs\";\nexport function isType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type) || isListType(type) || isNonNullType(type);\n}\nexport function assertType(type) {\n  if (!isType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL type.\"));\n  }\n\n  return type;\n}\n/**\n * There are predicates for each kind of GraphQL type.\n */\n// eslint-disable-next-line no-redeclare\n\nexport function isScalarType(type) {\n  return instanceOf(type, GraphQLScalarType);\n}\nexport function assertScalarType(type) {\n  if (!isScalarType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Scalar type.\"));\n  }\n\n  return type;\n} // eslint-disable-next-line no-redeclare\n\nexport function isObjectType(type) {\n  return instanceOf(type, GraphQLObjectType);\n}\nexport function assertObjectType(type) {\n  if (!isObjectType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Object type.\"));\n  }\n\n  return type;\n} // eslint-disable-next-line no-redeclare\n\nexport function isInterfaceType(type) {\n  return instanceOf(type, GraphQLInterfaceType);\n}\nexport function assertInterfaceType(type) {\n  if (!isInterfaceType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Interface type.\"));\n  }\n\n  return type;\n} // eslint-disable-next-line no-redeclare\n\nexport function isUnionType(type) {\n  return instanceOf(type, GraphQLUnionType);\n}\nexport function assertUnionType(type) {\n  if (!isUnionType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Union type.\"));\n  }\n\n  return type;\n} // eslint-disable-next-line no-redeclare\n\nexport function isEnumType(type) {\n  return instanceOf(type, GraphQLEnumType);\n}\nexport function assertEnumType(type) {\n  if (!isEnumType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Enum type.\"));\n  }\n\n  return type;\n} // eslint-disable-next-line no-redeclare\n\nexport function isInputObjectType(type) {\n  return instanceOf(type, GraphQLInputObjectType);\n}\nexport function assertInputObjectType(type) {\n  if (!isInputObjectType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Input Object type.\"));\n  }\n\n  return type;\n} // eslint-disable-next-line no-redeclare\n\nexport function isListType(type) {\n  return instanceOf(type, GraphQLList);\n}\nexport function assertListType(type) {\n  if (!isListType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL List type.\"));\n  }\n\n  return type;\n} // eslint-disable-next-line no-redeclare\n\nexport function isNonNullType(type) {\n  return instanceOf(type, GraphQLNonNull);\n}\nexport function assertNonNullType(type) {\n  if (!isNonNullType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Non-Null type.\"));\n  }\n\n  return type;\n}\n/**\n * These types may be used as input types for arguments and directives.\n */\n\nexport function isInputType(type) {\n  return isScalarType(type) || isEnumType(type) || isInputObjectType(type) || isWrappingType(type) && isInputType(type.ofType);\n}\nexport function assertInputType(type) {\n  if (!isInputType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL input type.\"));\n  }\n\n  return type;\n}\n/**\n * These types may be used as output types as the result of fields.\n */\n\nexport function isOutputType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isWrappingType(type) && isOutputType(type.ofType);\n}\nexport function assertOutputType(type) {\n  if (!isOutputType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL output type.\"));\n  }\n\n  return type;\n}\n/**\n * These types may describe types which may be leaf values.\n */\n\nexport function isLeafType(type) {\n  return isScalarType(type) || isEnumType(type);\n}\nexport function assertLeafType(type) {\n  if (!isLeafType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL leaf type.\"));\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isCompositeType(type) {\n  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);\n}\nexport function assertCompositeType(type) {\n  if (!isCompositeType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL composite type.\"));\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isAbstractType(type) {\n  return isInterfaceType(type) || isUnionType(type);\n}\nexport function assertAbstractType(type) {\n  if (!isAbstractType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL abstract type.\"));\n  }\n\n  return type;\n}\n/**\n * List Type Wrapper\n *\n * A list is a wrapping type which points to another type.\n * Lists are often created within the context of defining the fields of\n * an object type.\n *\n * Example:\n *\n *     const PersonType = new GraphQLObjectType({\n *       name: 'Person',\n *       fields: () => ({\n *         parents: { type: GraphQLList(PersonType) },\n *         children: { type: GraphQLList(PersonType) },\n *       })\n *     })\n *\n */\n// FIXME: workaround to fix issue with Babel parser\n\n/* ::\ndeclare class GraphQLList<+T: GraphQLType> {\n  +ofType: T;\n  static <T>(ofType: T): GraphQLList<T>;\n  // Note: constructors cannot be used for covariant types. Drop the \"new\".\n  constructor(ofType: GraphQLType): void;\n}\n*/\n\nexport function GraphQLList(ofType) {\n  if (this instanceof GraphQLList) {\n    this.ofType = assertType(ofType);\n  } else {\n    return new GraphQLList(ofType);\n  }\n} // Need to cast through any to alter the prototype.\n\nGraphQLList.prototype.toString = function toString() {\n  return '[' + String(this.ofType) + ']';\n};\n\nObject.defineProperty(GraphQLList.prototype, SYMBOL_TO_STRING_TAG, {\n  get: function get() {\n    return 'GraphQLList';\n  }\n});\ndefineToJSON(GraphQLList);\n/**\n * Non-Null Type Wrapper\n *\n * A non-null is a wrapping type which points to another type.\n * Non-null types enforce that their values are never null and can ensure\n * an error is raised if this ever occurs during a request. It is useful for\n * fields which you can make a strong guarantee on non-nullability, for example\n * usually the id field of a database row will never be null.\n *\n * Example:\n *\n *     const RowType = new GraphQLObjectType({\n *       name: 'Row',\n *       fields: () => ({\n *         id: { type: GraphQLNonNull(GraphQLString) },\n *       })\n *     })\n *\n * Note: the enforcement of non-nullability occurs within the executor.\n */\n// FIXME: workaround to fix issue with Babel parser\n\n/* ::\ndeclare class GraphQLNonNull<+T: GraphQLNullableType> {\n  +ofType: T;\n  static <T>(ofType: T): GraphQLNonNull<T>;\n  // Note: constructors cannot be used for covariant types. Drop the \"new\".\n  constructor(ofType: GraphQLType): void;\n}\n*/\n\nexport function GraphQLNonNull(ofType) {\n  if (this instanceof GraphQLNonNull) {\n    this.ofType = assertNullableType(ofType);\n  } else {\n    return new GraphQLNonNull(ofType);\n  }\n} // Need to cast through any to alter the prototype.\n\nGraphQLNonNull.prototype.toString = function toString() {\n  return String(this.ofType) + '!';\n};\n\nObject.defineProperty(GraphQLNonNull.prototype, SYMBOL_TO_STRING_TAG, {\n  get: function get() {\n    return 'GraphQLNonNull';\n  }\n});\ndefineToJSON(GraphQLNonNull);\n/**\n * These types wrap and modify other types\n */\n\nexport function isWrappingType(type) {\n  return isListType(type) || isNonNullType(type);\n}\nexport function assertWrappingType(type) {\n  if (!isWrappingType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL wrapping type.\"));\n  }\n\n  return type;\n}\n/**\n * These types can all accept null as a value.\n */\n\nexport function isNullableType(type) {\n  return isType(type) && !isNonNullType(type);\n}\nexport function assertNullableType(type) {\n  if (!isNullableType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL nullable type.\"));\n  }\n\n  return type;\n}\n/* eslint-disable no-redeclare */\n\nexport function getNullableType(type) {\n  /* eslint-enable no-redeclare */\n  if (type) {\n    return isNonNullType(type) ? type.ofType : type;\n  }\n}\n/**\n * These named types do not include modifiers like List or NonNull.\n */\n\nexport function isNamedType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type);\n}\nexport function assertNamedType(type) {\n  if (!isNamedType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL named type.\"));\n  }\n\n  return type;\n}\n/* eslint-disable no-redeclare */\n\nexport function getNamedType(type) {\n  /* eslint-enable no-redeclare */\n  if (type) {\n    var unwrappedType = type;\n\n    while (isWrappingType(unwrappedType)) {\n      unwrappedType = unwrappedType.ofType;\n    }\n\n    return unwrappedType;\n  }\n}\n/**\n * Used while defining GraphQL types to allow for circular references in\n * otherwise immutable type definitions.\n */\n\nfunction resolveThunk(thunk) {\n  // $FlowFixMe(>=0.90.0)\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\n\nfunction undefineIfEmpty(arr) {\n  return arr && arr.length > 0 ? arr : undefined;\n}\n/**\n * Scalar Type Definition\n *\n * The leaf values of any request and input values to arguments are\n * Scalars (or Enums) and are defined with a name and a series of functions\n * used to parse input from ast or variables and to ensure validity.\n *\n * If a type's serialize function does not return a value (i.e. it returns\n * `undefined`) then an error will be raised and a `null` value will be returned\n * in the response. If the serialize function returns `null`, then no error will\n * be included in the response.\n *\n * Example:\n *\n *     const OddType = new GraphQLScalarType({\n *       name: 'Odd',\n *       serialize(value) {\n *         if (value % 2 === 1) {\n *           return value;\n *         }\n *       }\n *     });\n *\n */\n\n\nexport var GraphQLScalarType = /*#__PURE__*/function () {\n  function GraphQLScalarType(config) {\n    var _config$parseValue, _config$serialize, _config$parseLiteral;\n\n    var parseValue = (_config$parseValue = config.parseValue) !== null && _config$parseValue !== void 0 ? _config$parseValue : identityFunc;\n    this.name = config.name;\n    this.description = config.description;\n    this.serialize = (_config$serialize = config.serialize) !== null && _config$serialize !== void 0 ? _config$serialize : identityFunc;\n    this.parseValue = parseValue;\n    this.parseLiteral = (_config$parseLiteral = config.parseLiteral) !== null && _config$parseLiteral !== void 0 ? _config$parseLiteral : function (node) {\n      return parseValue(valueFromASTUntyped(node));\n    };\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);\n    typeof config.name === 'string' || devAssert(0, 'Must provide name.');\n    config.serialize == null || typeof config.serialize === 'function' || devAssert(0, \"\".concat(this.name, \" must provide \\\"serialize\\\" function. If this custom Scalar is also used as an input type, ensure \\\"parseValue\\\" and \\\"parseLiteral\\\" functions are also provided.\"));\n\n    if (config.parseLiteral) {\n      typeof config.parseValue === 'function' && typeof config.parseLiteral === 'function' || devAssert(0, \"\".concat(this.name, \" must provide both \\\"parseValue\\\" and \\\"parseLiteral\\\" functions.\"));\n    }\n  }\n\n  var _proto = GraphQLScalarType.prototype;\n\n  _proto.toConfig = function toConfig() {\n    var _this$extensionASTNod;\n\n    return {\n      name: this.name,\n      description: this.description,\n      serialize: this.serialize,\n      parseValue: this.parseValue,\n      parseLiteral: this.parseLiteral,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: (_this$extensionASTNod = this.extensionASTNodes) !== null && _this$extensionASTNod !== void 0 ? _this$extensionASTNod : []\n    };\n  };\n\n  _proto.toString = function toString() {\n    return this.name;\n  } // $FlowFixMe Flow doesn't support computed properties yet\n  ;\n\n  _createClass(GraphQLScalarType, [{\n    key: SYMBOL_TO_STRING_TAG,\n    get: function get() {\n      return 'GraphQLScalarType';\n    }\n  }]);\n\n  return GraphQLScalarType;\n}();\ndefineToJSON(GraphQLScalarType);\n/**\n * Object Type Definition\n *\n * Almost all of the GraphQL types you define will be object types. Object types\n * have a name, but most importantly describe their fields.\n *\n * Example:\n *\n *     const AddressType = new GraphQLObjectType({\n *       name: 'Address',\n *       fields: {\n *         street: { type: GraphQLString },\n *         number: { type: GraphQLInt },\n *         formatted: {\n *           type: GraphQLString,\n *           resolve(obj) {\n *             return obj.number + ' ' + obj.street\n *           }\n *         }\n *       }\n *     });\n *\n * When two types need to refer to each other, or a type needs to refer to\n * itself in a field, you can use a function expression (aka a closure or a\n * thunk) to supply the fields lazily.\n *\n * Example:\n *\n *     const PersonType = new GraphQLObjectType({\n *       name: 'Person',\n *       fields: () => ({\n *         name: { type: GraphQLString },\n *         bestFriend: { type: PersonType },\n *       })\n *     });\n *\n */\n\nexport var GraphQLObjectType = /*#__PURE__*/function () {\n  function GraphQLObjectType(config) {\n    this.name = config.name;\n    this.description = config.description;\n    this.isTypeOf = config.isTypeOf;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);\n    this._fields = defineFieldMap.bind(undefined, config);\n    this._interfaces = defineInterfaces.bind(undefined, config);\n    typeof config.name === 'string' || devAssert(0, 'Must provide name.');\n    config.isTypeOf == null || typeof config.isTypeOf === 'function' || devAssert(0, \"\".concat(this.name, \" must provide \\\"isTypeOf\\\" as a function, \") + \"but got: \".concat(inspect(config.isTypeOf), \".\"));\n  }\n\n  var _proto2 = GraphQLObjectType.prototype;\n\n  _proto2.getFields = function getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  };\n\n  _proto2.getInterfaces = function getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  };\n\n  _proto2.toConfig = function toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      isTypeOf: this.isTypeOf,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes || []\n    };\n  };\n\n  _proto2.toString = function toString() {\n    return this.name;\n  } // $FlowFixMe Flow doesn't support computed properties yet\n  ;\n\n  _createClass(GraphQLObjectType, [{\n    key: SYMBOL_TO_STRING_TAG,\n    get: function get() {\n      return 'GraphQLObjectType';\n    }\n  }]);\n\n  return GraphQLObjectType;\n}();\ndefineToJSON(GraphQLObjectType);\n\nfunction defineInterfaces(config) {\n  var _resolveThunk;\n\n  var interfaces = (_resolveThunk = resolveThunk(config.interfaces)) !== null && _resolveThunk !== void 0 ? _resolveThunk : [];\n  Array.isArray(interfaces) || devAssert(0, \"\".concat(config.name, \" interfaces must be an Array or a function which returns an Array.\"));\n  return interfaces;\n}\n\nfunction defineFieldMap(config) {\n  var fieldMap = resolveThunk(config.fields);\n  isPlainObj(fieldMap) || devAssert(0, \"\".concat(config.name, \" fields must be an object with field names as keys or a function which returns such an object.\"));\n  return mapValue(fieldMap, function (fieldConfig, fieldName) {\n    var _fieldConfig$args;\n\n    isPlainObj(fieldConfig) || devAssert(0, \"\".concat(config.name, \".\").concat(fieldName, \" field config must be an object.\"));\n    !('isDeprecated' in fieldConfig) || devAssert(0, \"\".concat(config.name, \".\").concat(fieldName, \" should provide \\\"deprecationReason\\\" instead of \\\"isDeprecated\\\".\"));\n    fieldConfig.resolve == null || typeof fieldConfig.resolve === 'function' || devAssert(0, \"\".concat(config.name, \".\").concat(fieldName, \" field resolver must be a function if \") + \"provided, but got: \".concat(inspect(fieldConfig.resolve), \".\"));\n    var argsConfig = (_fieldConfig$args = fieldConfig.args) !== null && _fieldConfig$args !== void 0 ? _fieldConfig$args : {};\n    isPlainObj(argsConfig) || devAssert(0, \"\".concat(config.name, \".\").concat(fieldName, \" args must be an object with argument names as keys.\"));\n    var args = objectEntries(argsConfig).map(function (_ref) {\n      var argName = _ref[0],\n          argConfig = _ref[1];\n      return {\n        name: argName,\n        description: argConfig.description,\n        type: argConfig.type,\n        defaultValue: argConfig.defaultValue,\n        extensions: argConfig.extensions && toObjMap(argConfig.extensions),\n        astNode: argConfig.astNode\n      };\n    });\n    return {\n      name: fieldName,\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      args: args,\n      resolve: fieldConfig.resolve,\n      subscribe: fieldConfig.subscribe,\n      isDeprecated: fieldConfig.deprecationReason != null,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: fieldConfig.extensions && toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode\n    };\n  });\n}\n\nfunction isPlainObj(obj) {\n  return isObjectLike(obj) && !Array.isArray(obj);\n}\n\nfunction fieldsToFieldsConfig(fields) {\n  return mapValue(fields, function (field) {\n    return {\n      description: field.description,\n      type: field.type,\n      args: argsToArgsConfig(field.args),\n      resolve: field.resolve,\n      subscribe: field.subscribe,\n      deprecationReason: field.deprecationReason,\n      extensions: field.extensions,\n      astNode: field.astNode\n    };\n  });\n}\n/**\n * @internal\n */\n\n\nexport function argsToArgsConfig(args) {\n  return keyValMap(args, function (arg) {\n    return arg.name;\n  }, function (arg) {\n    return {\n      description: arg.description,\n      type: arg.type,\n      defaultValue: arg.defaultValue,\n      extensions: arg.extensions,\n      astNode: arg.astNode\n    };\n  });\n}\nexport function isRequiredArgument(arg) {\n  return isNonNullType(arg.type) && arg.defaultValue === undefined;\n}\n/**\n * Interface Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Interface type\n * is used to describe what types are possible, what fields are in common across\n * all types, as well as a function to determine which type is actually used\n * when the field is resolved.\n *\n * Example:\n *\n *     const EntityType = new GraphQLInterfaceType({\n *       name: 'Entity',\n *       fields: {\n *         name: { type: GraphQLString }\n *       }\n *     });\n *\n */\n\nexport var GraphQLInterfaceType = /*#__PURE__*/function () {\n  function GraphQLInterfaceType(config) {\n    this.name = config.name;\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);\n    this._fields = defineFieldMap.bind(undefined, config);\n    this._interfaces = defineInterfaces.bind(undefined, config);\n    typeof config.name === 'string' || devAssert(0, 'Must provide name.');\n    config.resolveType == null || typeof config.resolveType === 'function' || devAssert(0, \"\".concat(this.name, \" must provide \\\"resolveType\\\" as a function, \") + \"but got: \".concat(inspect(config.resolveType), \".\"));\n  }\n\n  var _proto3 = GraphQLInterfaceType.prototype;\n\n  _proto3.getFields = function getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  };\n\n  _proto3.getInterfaces = function getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  };\n\n  _proto3.toConfig = function toConfig() {\n    var _this$extensionASTNod2;\n\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: (_this$extensionASTNod2 = this.extensionASTNodes) !== null && _this$extensionASTNod2 !== void 0 ? _this$extensionASTNod2 : []\n    };\n  };\n\n  _proto3.toString = function toString() {\n    return this.name;\n  } // $FlowFixMe Flow doesn't support computed properties yet\n  ;\n\n  _createClass(GraphQLInterfaceType, [{\n    key: SYMBOL_TO_STRING_TAG,\n    get: function get() {\n      return 'GraphQLInterfaceType';\n    }\n  }]);\n\n  return GraphQLInterfaceType;\n}();\ndefineToJSON(GraphQLInterfaceType);\n/**\n * Union Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Union type\n * is used to describe what types are possible as well as providing a function\n * to determine which type is actually used when the field is resolved.\n *\n * Example:\n *\n *     const PetType = new GraphQLUnionType({\n *       name: 'Pet',\n *       types: [ DogType, CatType ],\n *       resolveType(value) {\n *         if (value instanceof Dog) {\n *           return DogType;\n *         }\n *         if (value instanceof Cat) {\n *           return CatType;\n *         }\n *       }\n *     });\n *\n */\n\nexport var GraphQLUnionType = /*#__PURE__*/function () {\n  function GraphQLUnionType(config) {\n    this.name = config.name;\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);\n    this._types = defineTypes.bind(undefined, config);\n    typeof config.name === 'string' || devAssert(0, 'Must provide name.');\n    config.resolveType == null || typeof config.resolveType === 'function' || devAssert(0, \"\".concat(this.name, \" must provide \\\"resolveType\\\" as a function, \") + \"but got: \".concat(inspect(config.resolveType), \".\"));\n  }\n\n  var _proto4 = GraphQLUnionType.prototype;\n\n  _proto4.getTypes = function getTypes() {\n    if (typeof this._types === 'function') {\n      this._types = this._types();\n    }\n\n    return this._types;\n  };\n\n  _proto4.toConfig = function toConfig() {\n    var _this$extensionASTNod3;\n\n    return {\n      name: this.name,\n      description: this.description,\n      types: this.getTypes(),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: (_this$extensionASTNod3 = this.extensionASTNodes) !== null && _this$extensionASTNod3 !== void 0 ? _this$extensionASTNod3 : []\n    };\n  };\n\n  _proto4.toString = function toString() {\n    return this.name;\n  } // $FlowFixMe Flow doesn't support computed properties yet\n  ;\n\n  _createClass(GraphQLUnionType, [{\n    key: SYMBOL_TO_STRING_TAG,\n    get: function get() {\n      return 'GraphQLUnionType';\n    }\n  }]);\n\n  return GraphQLUnionType;\n}();\ndefineToJSON(GraphQLUnionType);\n\nfunction defineTypes(config) {\n  var types = resolveThunk(config.types);\n  Array.isArray(types) || devAssert(0, \"Must provide Array of types or a function which returns such an array for Union \".concat(config.name, \".\"));\n  return types;\n}\n/**\n * Enum Type Definition\n *\n * Some leaf values of requests and input values are Enums. GraphQL serializes\n * Enum values as strings, however internally Enums can be represented by any\n * kind of type, often integers.\n *\n * Example:\n *\n *     const RGBType = new GraphQLEnumType({\n *       name: 'RGB',\n *       values: {\n *         RED: { value: 0 },\n *         GREEN: { value: 1 },\n *         BLUE: { value: 2 }\n *       }\n *     });\n *\n * Note: If a value is not provided in a definition, the name of the enum value\n * will be used as its internal value.\n */\n\n\nexport var GraphQLEnumType\n/* <T> */\n=\n/*#__PURE__*/\nfunction () {\n  function GraphQLEnumType(config) {\n    this.name = config.name;\n    this.description = config.description;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);\n    this._values = defineEnumValues(this.name, config.values);\n    this._valueLookup = new Map(this._values.map(function (enumValue) {\n      return [enumValue.value, enumValue];\n    }));\n    this._nameLookup = keyMap(this._values, function (value) {\n      return value.name;\n    });\n    typeof config.name === 'string' || devAssert(0, 'Must provide name.');\n  }\n\n  var _proto5 = GraphQLEnumType.prototype;\n\n  _proto5.getValues = function getValues() {\n    return this._values;\n  };\n\n  _proto5.getValue = function getValue(name) {\n    return this._nameLookup[name];\n  };\n\n  _proto5.serialize = function serialize(outputValue) {\n    var enumValue = this._valueLookup.get(outputValue);\n\n    if (enumValue === undefined) {\n      throw new GraphQLError(\"Enum \\\"\".concat(this.name, \"\\\" cannot represent value: \").concat(inspect(outputValue)));\n    }\n\n    return enumValue.name;\n  };\n\n  _proto5.parseValue = function parseValue(inputValue)\n  /* T */\n  {\n    if (typeof inputValue !== 'string') {\n      var valueStr = inspect(inputValue);\n      throw new GraphQLError(\"Enum \\\"\".concat(this.name, \"\\\" cannot represent non-string value: \").concat(valueStr, \".\") + didYouMeanEnumValue(this, valueStr));\n    }\n\n    var enumValue = this.getValue(inputValue);\n\n    if (enumValue == null) {\n      throw new GraphQLError(\"Value \\\"\".concat(inputValue, \"\\\" does not exist in \\\"\").concat(this.name, \"\\\" enum.\") + didYouMeanEnumValue(this, inputValue));\n    }\n\n    return enumValue.value;\n  };\n\n  _proto5.parseLiteral = function parseLiteral(valueNode, _variables)\n  /* T */\n  {\n    // Note: variables will be resolved to a value before calling this function.\n    if (valueNode.kind !== Kind.ENUM) {\n      var valueStr = print(valueNode);\n      throw new GraphQLError(\"Enum \\\"\".concat(this.name, \"\\\" cannot represent non-enum value: \").concat(valueStr, \".\") + didYouMeanEnumValue(this, valueStr), valueNode);\n    }\n\n    var enumValue = this.getValue(valueNode.value);\n\n    if (enumValue == null) {\n      var _valueStr = print(valueNode);\n\n      throw new GraphQLError(\"Value \\\"\".concat(_valueStr, \"\\\" does not exist in \\\"\").concat(this.name, \"\\\" enum.\") + didYouMeanEnumValue(this, _valueStr), valueNode);\n    }\n\n    return enumValue.value;\n  };\n\n  _proto5.toConfig = function toConfig() {\n    var _this$extensionASTNod4;\n\n    var values = keyValMap(this.getValues(), function (value) {\n      return value.name;\n    }, function (value) {\n      return {\n        description: value.description,\n        value: value.value,\n        deprecationReason: value.deprecationReason,\n        extensions: value.extensions,\n        astNode: value.astNode\n      };\n    });\n    return {\n      name: this.name,\n      description: this.description,\n      values: values,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: (_this$extensionASTNod4 = this.extensionASTNodes) !== null && _this$extensionASTNod4 !== void 0 ? _this$extensionASTNod4 : []\n    };\n  };\n\n  _proto5.toString = function toString() {\n    return this.name;\n  } // $FlowFixMe Flow doesn't support computed properties yet\n  ;\n\n  _createClass(GraphQLEnumType, [{\n    key: SYMBOL_TO_STRING_TAG,\n    get: function get() {\n      return 'GraphQLEnumType';\n    }\n  }]);\n\n  return GraphQLEnumType;\n}();\ndefineToJSON(GraphQLEnumType);\n\nfunction didYouMeanEnumValue(enumType, unknownValueStr) {\n  var allNames = enumType.getValues().map(function (value) {\n    return value.name;\n  });\n  var suggestedValues = suggestionList(unknownValueStr, allNames);\n  return didYouMean('the enum value', suggestedValues);\n}\n\nfunction defineEnumValues(typeName, valueMap) {\n  isPlainObj(valueMap) || devAssert(0, \"\".concat(typeName, \" values must be an object with value names as keys.\"));\n  return objectEntries(valueMap).map(function (_ref2) {\n    var valueName = _ref2[0],\n        valueConfig = _ref2[1];\n    isPlainObj(valueConfig) || devAssert(0, \"\".concat(typeName, \".\").concat(valueName, \" must refer to an object with a \\\"value\\\" key \") + \"representing an internal value but got: \".concat(inspect(valueConfig), \".\"));\n    !('isDeprecated' in valueConfig) || devAssert(0, \"\".concat(typeName, \".\").concat(valueName, \" should provide \\\"deprecationReason\\\" instead of \\\"isDeprecated\\\".\"));\n    return {\n      name: valueName,\n      description: valueConfig.description,\n      value: valueConfig.value !== undefined ? valueConfig.value : valueName,\n      isDeprecated: valueConfig.deprecationReason != null,\n      deprecationReason: valueConfig.deprecationReason,\n      extensions: valueConfig.extensions && toObjMap(valueConfig.extensions),\n      astNode: valueConfig.astNode\n    };\n  });\n}\n/**\n * Input Object Type Definition\n *\n * An input object defines a structured collection of fields which may be\n * supplied to a field argument.\n *\n * Using `NonNull` will ensure that a value must be provided by the query\n *\n * Example:\n *\n *     const GeoPoint = new GraphQLInputObjectType({\n *       name: 'GeoPoint',\n *       fields: {\n *         lat: { type: GraphQLNonNull(GraphQLFloat) },\n *         lon: { type: GraphQLNonNull(GraphQLFloat) },\n *         alt: { type: GraphQLFloat, defaultValue: 0 },\n *       }\n *     });\n *\n */\n\n\nexport var GraphQLInputObjectType = /*#__PURE__*/function () {\n  function GraphQLInputObjectType(config) {\n    this.name = config.name;\n    this.description = config.description;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);\n    this._fields = defineInputFieldMap.bind(undefined, config);\n    typeof config.name === 'string' || devAssert(0, 'Must provide name.');\n  }\n\n  var _proto6 = GraphQLInputObjectType.prototype;\n\n  _proto6.getFields = function getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  };\n\n  _proto6.toConfig = function toConfig() {\n    var _this$extensionASTNod5;\n\n    var fields = mapValue(this.getFields(), function (field) {\n      return {\n        description: field.description,\n        type: field.type,\n        defaultValue: field.defaultValue,\n        extensions: field.extensions,\n        astNode: field.astNode\n      };\n    });\n    return {\n      name: this.name,\n      description: this.description,\n      fields: fields,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: (_this$extensionASTNod5 = this.extensionASTNodes) !== null && _this$extensionASTNod5 !== void 0 ? _this$extensionASTNod5 : []\n    };\n  };\n\n  _proto6.toString = function toString() {\n    return this.name;\n  } // $FlowFixMe Flow doesn't support computed properties yet\n  ;\n\n  _createClass(GraphQLInputObjectType, [{\n    key: SYMBOL_TO_STRING_TAG,\n    get: function get() {\n      return 'GraphQLInputObjectType';\n    }\n  }]);\n\n  return GraphQLInputObjectType;\n}();\ndefineToJSON(GraphQLInputObjectType);\n\nfunction defineInputFieldMap(config) {\n  var fieldMap = resolveThunk(config.fields);\n  isPlainObj(fieldMap) || devAssert(0, \"\".concat(config.name, \" fields must be an object with field names as keys or a function which returns such an object.\"));\n  return mapValue(fieldMap, function (fieldConfig, fieldName) {\n    !('resolve' in fieldConfig) || devAssert(0, \"\".concat(config.name, \".\").concat(fieldName, \" field has a resolve property, but Input Types cannot define resolvers.\"));\n    return {\n      name: fieldName,\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      defaultValue: fieldConfig.defaultValue,\n      extensions: fieldConfig.extensions && toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode\n    };\n  });\n}\n\nexport function isRequiredInputField(field) {\n  return isNonNullType(field.type) && field.defaultValue === undefined;\n}","map":{"version":3,"sources":["/Users/insungsong/Documents/prismagram-frontend/node_modules/graphql/type/definition.mjs"],"names":["_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","prototype","objectEntries","SYMBOL_TO_STRING_TAG","inspect","keyMap","mapValue","toObjMap","devAssert","keyValMap","instanceOf","didYouMean","isObjectLike","identityFunc","defineToJSON","suggestionList","Kind","print","GraphQLError","valueFromASTUntyped","isType","type","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","isListType","isNonNullType","assertType","Error","concat","GraphQLScalarType","assertScalarType","GraphQLObjectType","assertObjectType","GraphQLInterfaceType","assertInterfaceType","GraphQLUnionType","assertUnionType","GraphQLEnumType","assertEnumType","GraphQLInputObjectType","assertInputObjectType","GraphQLList","assertListType","GraphQLNonNull","assertNonNullType","isInputType","isWrappingType","ofType","assertInputType","isOutputType","assertOutputType","isLeafType","assertLeafType","isCompositeType","assertCompositeType","isAbstractType","assertAbstractType","toString","String","get","assertNullableType","assertWrappingType","isNullableType","getNullableType","isNamedType","assertNamedType","getNamedType","unwrappedType","resolveThunk","thunk","undefineIfEmpty","arr","undefined","config","_config$parseValue","_config$serialize","_config$parseLiteral","parseValue","name","description","serialize","parseLiteral","node","extensions","astNode","extensionASTNodes","_proto","toConfig","_this$extensionASTNod","isTypeOf","_fields","defineFieldMap","bind","_interfaces","defineInterfaces","_proto2","getFields","getInterfaces","interfaces","fields","fieldsToFieldsConfig","_resolveThunk","Array","isArray","fieldMap","isPlainObj","fieldConfig","fieldName","_fieldConfig$args","resolve","argsConfig","args","map","_ref","argName","argConfig","defaultValue","subscribe","isDeprecated","deprecationReason","obj","field","argsToArgsConfig","arg","isRequiredArgument","resolveType","_proto3","_this$extensionASTNod2","_types","defineTypes","_proto4","getTypes","_this$extensionASTNod3","types","_values","defineEnumValues","values","_valueLookup","Map","enumValue","value","_nameLookup","_proto5","getValues","getValue","outputValue","inputValue","valueStr","didYouMeanEnumValue","valueNode","_variables","kind","ENUM","_valueStr","_this$extensionASTNod4","enumType","unknownValueStr","allNames","suggestedValues","typeName","valueMap","_ref2","valueName","valueConfig","defineInputFieldMap","_proto6","_this$extensionASTNod5","isRequiredInputField"],"mappings":"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","sourcesContent":["function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n// FIXME\n\n/* eslint-disable import/no-cycle */\nimport objectEntries from \"../polyfills/objectEntries.mjs\";\nimport { SYMBOL_TO_STRING_TAG } from \"../polyfills/symbols.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport keyMap from \"../jsutils/keyMap.mjs\";\nimport mapValue from \"../jsutils/mapValue.mjs\";\nimport toObjMap from \"../jsutils/toObjMap.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport keyValMap from \"../jsutils/keyValMap.mjs\";\nimport instanceOf from \"../jsutils/instanceOf.mjs\";\nimport didYouMean from \"../jsutils/didYouMean.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport identityFunc from \"../jsutils/identityFunc.mjs\";\nimport defineToJSON from \"../jsutils/defineToJSON.mjs\";\nimport suggestionList from \"../jsutils/suggestionList.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { print } from \"../language/printer.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { valueFromASTUntyped } from \"../utilities/valueFromASTUntyped.mjs\";\nexport function isType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type) || isListType(type) || isNonNullType(type);\n}\nexport function assertType(type) {\n  if (!isType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL type.\"));\n  }\n\n  return type;\n}\n/**\n * There are predicates for each kind of GraphQL type.\n */\n\n// eslint-disable-next-line no-redeclare\nexport function isScalarType(type) {\n  return instanceOf(type, GraphQLScalarType);\n}\nexport function assertScalarType(type) {\n  if (!isScalarType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Scalar type.\"));\n  }\n\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isObjectType(type) {\n  return instanceOf(type, GraphQLObjectType);\n}\nexport function assertObjectType(type) {\n  if (!isObjectType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Object type.\"));\n  }\n\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isInterfaceType(type) {\n  return instanceOf(type, GraphQLInterfaceType);\n}\nexport function assertInterfaceType(type) {\n  if (!isInterfaceType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Interface type.\"));\n  }\n\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isUnionType(type) {\n  return instanceOf(type, GraphQLUnionType);\n}\nexport function assertUnionType(type) {\n  if (!isUnionType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Union type.\"));\n  }\n\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isEnumType(type) {\n  return instanceOf(type, GraphQLEnumType);\n}\nexport function assertEnumType(type) {\n  if (!isEnumType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Enum type.\"));\n  }\n\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isInputObjectType(type) {\n  return instanceOf(type, GraphQLInputObjectType);\n}\nexport function assertInputObjectType(type) {\n  if (!isInputObjectType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Input Object type.\"));\n  }\n\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isListType(type) {\n  return instanceOf(type, GraphQLList);\n}\nexport function assertListType(type) {\n  if (!isListType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL List type.\"));\n  }\n\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isNonNullType(type) {\n  return instanceOf(type, GraphQLNonNull);\n}\nexport function assertNonNullType(type) {\n  if (!isNonNullType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL Non-Null type.\"));\n  }\n\n  return type;\n}\n/**\n * These types may be used as input types for arguments and directives.\n */\n\nexport function isInputType(type) {\n  return isScalarType(type) || isEnumType(type) || isInputObjectType(type) || isWrappingType(type) && isInputType(type.ofType);\n}\nexport function assertInputType(type) {\n  if (!isInputType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL input type.\"));\n  }\n\n  return type;\n}\n/**\n * These types may be used as output types as the result of fields.\n */\n\nexport function isOutputType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isWrappingType(type) && isOutputType(type.ofType);\n}\nexport function assertOutputType(type) {\n  if (!isOutputType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL output type.\"));\n  }\n\n  return type;\n}\n/**\n * These types may describe types which may be leaf values.\n */\n\nexport function isLeafType(type) {\n  return isScalarType(type) || isEnumType(type);\n}\nexport function assertLeafType(type) {\n  if (!isLeafType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL leaf type.\"));\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isCompositeType(type) {\n  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);\n}\nexport function assertCompositeType(type) {\n  if (!isCompositeType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL composite type.\"));\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isAbstractType(type) {\n  return isInterfaceType(type) || isUnionType(type);\n}\nexport function assertAbstractType(type) {\n  if (!isAbstractType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL abstract type.\"));\n  }\n\n  return type;\n}\n/**\n * List Type Wrapper\n *\n * A list is a wrapping type which points to another type.\n * Lists are often created within the context of defining the fields of\n * an object type.\n *\n * Example:\n *\n *     const PersonType = new GraphQLObjectType({\n *       name: 'Person',\n *       fields: () => ({\n *         parents: { type: GraphQLList(PersonType) },\n *         children: { type: GraphQLList(PersonType) },\n *       })\n *     })\n *\n */\n// FIXME: workaround to fix issue with Babel parser\n\n/* ::\ndeclare class GraphQLList<+T: GraphQLType> {\n  +ofType: T;\n  static <T>(ofType: T): GraphQLList<T>;\n  // Note: constructors cannot be used for covariant types. Drop the \"new\".\n  constructor(ofType: GraphQLType): void;\n}\n*/\n\nexport function GraphQLList(ofType) {\n  if (this instanceof GraphQLList) {\n    this.ofType = assertType(ofType);\n  } else {\n    return new GraphQLList(ofType);\n  }\n} // Need to cast through any to alter the prototype.\n\nGraphQLList.prototype.toString = function toString() {\n  return '[' + String(this.ofType) + ']';\n};\n\nObject.defineProperty(GraphQLList.prototype, SYMBOL_TO_STRING_TAG, {\n  get: function get() {\n    return 'GraphQLList';\n  }\n});\ndefineToJSON(GraphQLList);\n/**\n * Non-Null Type Wrapper\n *\n * A non-null is a wrapping type which points to another type.\n * Non-null types enforce that their values are never null and can ensure\n * an error is raised if this ever occurs during a request. It is useful for\n * fields which you can make a strong guarantee on non-nullability, for example\n * usually the id field of a database row will never be null.\n *\n * Example:\n *\n *     const RowType = new GraphQLObjectType({\n *       name: 'Row',\n *       fields: () => ({\n *         id: { type: GraphQLNonNull(GraphQLString) },\n *       })\n *     })\n *\n * Note: the enforcement of non-nullability occurs within the executor.\n */\n// FIXME: workaround to fix issue with Babel parser\n\n/* ::\ndeclare class GraphQLNonNull<+T: GraphQLNullableType> {\n  +ofType: T;\n  static <T>(ofType: T): GraphQLNonNull<T>;\n  // Note: constructors cannot be used for covariant types. Drop the \"new\".\n  constructor(ofType: GraphQLType): void;\n}\n*/\n\nexport function GraphQLNonNull(ofType) {\n  if (this instanceof GraphQLNonNull) {\n    this.ofType = assertNullableType(ofType);\n  } else {\n    return new GraphQLNonNull(ofType);\n  }\n} // Need to cast through any to alter the prototype.\n\nGraphQLNonNull.prototype.toString = function toString() {\n  return String(this.ofType) + '!';\n};\n\nObject.defineProperty(GraphQLNonNull.prototype, SYMBOL_TO_STRING_TAG, {\n  get: function get() {\n    return 'GraphQLNonNull';\n  }\n});\ndefineToJSON(GraphQLNonNull);\n/**\n * These types wrap and modify other types\n */\n\nexport function isWrappingType(type) {\n  return isListType(type) || isNonNullType(type);\n}\nexport function assertWrappingType(type) {\n  if (!isWrappingType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL wrapping type.\"));\n  }\n\n  return type;\n}\n/**\n * These types can all accept null as a value.\n */\n\nexport function isNullableType(type) {\n  return isType(type) && !isNonNullType(type);\n}\nexport function assertNullableType(type) {\n  if (!isNullableType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL nullable type.\"));\n  }\n\n  return type;\n}\n/* eslint-disable no-redeclare */\n\nexport function getNullableType(type) {\n  /* eslint-enable no-redeclare */\n  if (type) {\n    return isNonNullType(type) ? type.ofType : type;\n  }\n}\n/**\n * These named types do not include modifiers like List or NonNull.\n */\n\nexport function isNamedType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type);\n}\nexport function assertNamedType(type) {\n  if (!isNamedType(type)) {\n    throw new Error(\"Expected \".concat(inspect(type), \" to be a GraphQL named type.\"));\n  }\n\n  return type;\n}\n/* eslint-disable no-redeclare */\n\nexport function getNamedType(type) {\n  /* eslint-enable no-redeclare */\n  if (type) {\n    var unwrappedType = type;\n\n    while (isWrappingType(unwrappedType)) {\n      unwrappedType = unwrappedType.ofType;\n    }\n\n    return unwrappedType;\n  }\n}\n/**\n * Used while defining GraphQL types to allow for circular references in\n * otherwise immutable type definitions.\n */\n\nfunction resolveThunk(thunk) {\n  // $FlowFixMe(>=0.90.0)\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\n\nfunction undefineIfEmpty(arr) {\n  return arr && arr.length > 0 ? arr : undefined;\n}\n/**\n * Scalar Type Definition\n *\n * The leaf values of any request and input values to arguments are\n * Scalars (or Enums) and are defined with a name and a series of functions\n * used to parse input from ast or variables and to ensure validity.\n *\n * If a type's serialize function does not return a value (i.e. it returns\n * `undefined`) then an error will be raised and a `null` value will be returned\n * in the response. If the serialize function returns `null`, then no error will\n * be included in the response.\n *\n * Example:\n *\n *     const OddType = new GraphQLScalarType({\n *       name: 'Odd',\n *       serialize(value) {\n *         if (value % 2 === 1) {\n *           return value;\n *         }\n *       }\n *     });\n *\n */\n\n\nexport var GraphQLScalarType = /*#__PURE__*/function () {\n  function GraphQLScalarType(config) {\n    var _config$parseValue, _config$serialize, _config$parseLiteral;\n\n    var parseValue = (_config$parseValue = config.parseValue) !== null && _config$parseValue !== void 0 ? _config$parseValue : identityFunc;\n    this.name = config.name;\n    this.description = config.description;\n    this.serialize = (_config$serialize = config.serialize) !== null && _config$serialize !== void 0 ? _config$serialize : identityFunc;\n    this.parseValue = parseValue;\n    this.parseLiteral = (_config$parseLiteral = config.parseLiteral) !== null && _config$parseLiteral !== void 0 ? _config$parseLiteral : function (node) {\n      return parseValue(valueFromASTUntyped(node));\n    };\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);\n    typeof config.name === 'string' || devAssert(0, 'Must provide name.');\n    config.serialize == null || typeof config.serialize === 'function' || devAssert(0, \"\".concat(this.name, \" must provide \\\"serialize\\\" function. If this custom Scalar is also used as an input type, ensure \\\"parseValue\\\" and \\\"parseLiteral\\\" functions are also provided.\"));\n\n    if (config.parseLiteral) {\n      typeof config.parseValue === 'function' && typeof config.parseLiteral === 'function' || devAssert(0, \"\".concat(this.name, \" must provide both \\\"parseValue\\\" and \\\"parseLiteral\\\" functions.\"));\n    }\n  }\n\n  var _proto = GraphQLScalarType.prototype;\n\n  _proto.toConfig = function toConfig() {\n    var _this$extensionASTNod;\n\n    return {\n      name: this.name,\n      description: this.description,\n      serialize: this.serialize,\n      parseValue: this.parseValue,\n      parseLiteral: this.parseLiteral,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: (_this$extensionASTNod = this.extensionASTNodes) !== null && _this$extensionASTNod !== void 0 ? _this$extensionASTNod : []\n    };\n  };\n\n  _proto.toString = function toString() {\n    return this.name;\n  } // $FlowFixMe Flow doesn't support computed properties yet\n  ;\n\n  _createClass(GraphQLScalarType, [{\n    key: SYMBOL_TO_STRING_TAG,\n    get: function get() {\n      return 'GraphQLScalarType';\n    }\n  }]);\n\n  return GraphQLScalarType;\n}();\ndefineToJSON(GraphQLScalarType);\n\n/**\n * Object Type Definition\n *\n * Almost all of the GraphQL types you define will be object types. Object types\n * have a name, but most importantly describe their fields.\n *\n * Example:\n *\n *     const AddressType = new GraphQLObjectType({\n *       name: 'Address',\n *       fields: {\n *         street: { type: GraphQLString },\n *         number: { type: GraphQLInt },\n *         formatted: {\n *           type: GraphQLString,\n *           resolve(obj) {\n *             return obj.number + ' ' + obj.street\n *           }\n *         }\n *       }\n *     });\n *\n * When two types need to refer to each other, or a type needs to refer to\n * itself in a field, you can use a function expression (aka a closure or a\n * thunk) to supply the fields lazily.\n *\n * Example:\n *\n *     const PersonType = new GraphQLObjectType({\n *       name: 'Person',\n *       fields: () => ({\n *         name: { type: GraphQLString },\n *         bestFriend: { type: PersonType },\n *       })\n *     });\n *\n */\nexport var GraphQLObjectType = /*#__PURE__*/function () {\n  function GraphQLObjectType(config) {\n    this.name = config.name;\n    this.description = config.description;\n    this.isTypeOf = config.isTypeOf;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);\n    this._fields = defineFieldMap.bind(undefined, config);\n    this._interfaces = defineInterfaces.bind(undefined, config);\n    typeof config.name === 'string' || devAssert(0, 'Must provide name.');\n    config.isTypeOf == null || typeof config.isTypeOf === 'function' || devAssert(0, \"\".concat(this.name, \" must provide \\\"isTypeOf\\\" as a function, \") + \"but got: \".concat(inspect(config.isTypeOf), \".\"));\n  }\n\n  var _proto2 = GraphQLObjectType.prototype;\n\n  _proto2.getFields = function getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  };\n\n  _proto2.getInterfaces = function getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  };\n\n  _proto2.toConfig = function toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      isTypeOf: this.isTypeOf,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes || []\n    };\n  };\n\n  _proto2.toString = function toString() {\n    return this.name;\n  } // $FlowFixMe Flow doesn't support computed properties yet\n  ;\n\n  _createClass(GraphQLObjectType, [{\n    key: SYMBOL_TO_STRING_TAG,\n    get: function get() {\n      return 'GraphQLObjectType';\n    }\n  }]);\n\n  return GraphQLObjectType;\n}();\ndefineToJSON(GraphQLObjectType);\n\nfunction defineInterfaces(config) {\n  var _resolveThunk;\n\n  var interfaces = (_resolveThunk = resolveThunk(config.interfaces)) !== null && _resolveThunk !== void 0 ? _resolveThunk : [];\n  Array.isArray(interfaces) || devAssert(0, \"\".concat(config.name, \" interfaces must be an Array or a function which returns an Array.\"));\n  return interfaces;\n}\n\nfunction defineFieldMap(config) {\n  var fieldMap = resolveThunk(config.fields);\n  isPlainObj(fieldMap) || devAssert(0, \"\".concat(config.name, \" fields must be an object with field names as keys or a function which returns such an object.\"));\n  return mapValue(fieldMap, function (fieldConfig, fieldName) {\n    var _fieldConfig$args;\n\n    isPlainObj(fieldConfig) || devAssert(0, \"\".concat(config.name, \".\").concat(fieldName, \" field config must be an object.\"));\n    !('isDeprecated' in fieldConfig) || devAssert(0, \"\".concat(config.name, \".\").concat(fieldName, \" should provide \\\"deprecationReason\\\" instead of \\\"isDeprecated\\\".\"));\n    fieldConfig.resolve == null || typeof fieldConfig.resolve === 'function' || devAssert(0, \"\".concat(config.name, \".\").concat(fieldName, \" field resolver must be a function if \") + \"provided, but got: \".concat(inspect(fieldConfig.resolve), \".\"));\n    var argsConfig = (_fieldConfig$args = fieldConfig.args) !== null && _fieldConfig$args !== void 0 ? _fieldConfig$args : {};\n    isPlainObj(argsConfig) || devAssert(0, \"\".concat(config.name, \".\").concat(fieldName, \" args must be an object with argument names as keys.\"));\n    var args = objectEntries(argsConfig).map(function (_ref) {\n      var argName = _ref[0],\n          argConfig = _ref[1];\n      return {\n        name: argName,\n        description: argConfig.description,\n        type: argConfig.type,\n        defaultValue: argConfig.defaultValue,\n        extensions: argConfig.extensions && toObjMap(argConfig.extensions),\n        astNode: argConfig.astNode\n      };\n    });\n    return {\n      name: fieldName,\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      args: args,\n      resolve: fieldConfig.resolve,\n      subscribe: fieldConfig.subscribe,\n      isDeprecated: fieldConfig.deprecationReason != null,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: fieldConfig.extensions && toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode\n    };\n  });\n}\n\nfunction isPlainObj(obj) {\n  return isObjectLike(obj) && !Array.isArray(obj);\n}\n\nfunction fieldsToFieldsConfig(fields) {\n  return mapValue(fields, function (field) {\n    return {\n      description: field.description,\n      type: field.type,\n      args: argsToArgsConfig(field.args),\n      resolve: field.resolve,\n      subscribe: field.subscribe,\n      deprecationReason: field.deprecationReason,\n      extensions: field.extensions,\n      astNode: field.astNode\n    };\n  });\n}\n/**\n * @internal\n */\n\n\nexport function argsToArgsConfig(args) {\n  return keyValMap(args, function (arg) {\n    return arg.name;\n  }, function (arg) {\n    return {\n      description: arg.description,\n      type: arg.type,\n      defaultValue: arg.defaultValue,\n      extensions: arg.extensions,\n      astNode: arg.astNode\n    };\n  });\n}\nexport function isRequiredArgument(arg) {\n  return isNonNullType(arg.type) && arg.defaultValue === undefined;\n}\n\n/**\n * Interface Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Interface type\n * is used to describe what types are possible, what fields are in common across\n * all types, as well as a function to determine which type is actually used\n * when the field is resolved.\n *\n * Example:\n *\n *     const EntityType = new GraphQLInterfaceType({\n *       name: 'Entity',\n *       fields: {\n *         name: { type: GraphQLString }\n *       }\n *     });\n *\n */\nexport var GraphQLInterfaceType = /*#__PURE__*/function () {\n  function GraphQLInterfaceType(config) {\n    this.name = config.name;\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);\n    this._fields = defineFieldMap.bind(undefined, config);\n    this._interfaces = defineInterfaces.bind(undefined, config);\n    typeof config.name === 'string' || devAssert(0, 'Must provide name.');\n    config.resolveType == null || typeof config.resolveType === 'function' || devAssert(0, \"\".concat(this.name, \" must provide \\\"resolveType\\\" as a function, \") + \"but got: \".concat(inspect(config.resolveType), \".\"));\n  }\n\n  var _proto3 = GraphQLInterfaceType.prototype;\n\n  _proto3.getFields = function getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  };\n\n  _proto3.getInterfaces = function getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  };\n\n  _proto3.toConfig = function toConfig() {\n    var _this$extensionASTNod2;\n\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: (_this$extensionASTNod2 = this.extensionASTNodes) !== null && _this$extensionASTNod2 !== void 0 ? _this$extensionASTNod2 : []\n    };\n  };\n\n  _proto3.toString = function toString() {\n    return this.name;\n  } // $FlowFixMe Flow doesn't support computed properties yet\n  ;\n\n  _createClass(GraphQLInterfaceType, [{\n    key: SYMBOL_TO_STRING_TAG,\n    get: function get() {\n      return 'GraphQLInterfaceType';\n    }\n  }]);\n\n  return GraphQLInterfaceType;\n}();\ndefineToJSON(GraphQLInterfaceType);\n\n/**\n * Union Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Union type\n * is used to describe what types are possible as well as providing a function\n * to determine which type is actually used when the field is resolved.\n *\n * Example:\n *\n *     const PetType = new GraphQLUnionType({\n *       name: 'Pet',\n *       types: [ DogType, CatType ],\n *       resolveType(value) {\n *         if (value instanceof Dog) {\n *           return DogType;\n *         }\n *         if (value instanceof Cat) {\n *           return CatType;\n *         }\n *       }\n *     });\n *\n */\nexport var GraphQLUnionType = /*#__PURE__*/function () {\n  function GraphQLUnionType(config) {\n    this.name = config.name;\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);\n    this._types = defineTypes.bind(undefined, config);\n    typeof config.name === 'string' || devAssert(0, 'Must provide name.');\n    config.resolveType == null || typeof config.resolveType === 'function' || devAssert(0, \"\".concat(this.name, \" must provide \\\"resolveType\\\" as a function, \") + \"but got: \".concat(inspect(config.resolveType), \".\"));\n  }\n\n  var _proto4 = GraphQLUnionType.prototype;\n\n  _proto4.getTypes = function getTypes() {\n    if (typeof this._types === 'function') {\n      this._types = this._types();\n    }\n\n    return this._types;\n  };\n\n  _proto4.toConfig = function toConfig() {\n    var _this$extensionASTNod3;\n\n    return {\n      name: this.name,\n      description: this.description,\n      types: this.getTypes(),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: (_this$extensionASTNod3 = this.extensionASTNodes) !== null && _this$extensionASTNod3 !== void 0 ? _this$extensionASTNod3 : []\n    };\n  };\n\n  _proto4.toString = function toString() {\n    return this.name;\n  } // $FlowFixMe Flow doesn't support computed properties yet\n  ;\n\n  _createClass(GraphQLUnionType, [{\n    key: SYMBOL_TO_STRING_TAG,\n    get: function get() {\n      return 'GraphQLUnionType';\n    }\n  }]);\n\n  return GraphQLUnionType;\n}();\ndefineToJSON(GraphQLUnionType);\n\nfunction defineTypes(config) {\n  var types = resolveThunk(config.types);\n  Array.isArray(types) || devAssert(0, \"Must provide Array of types or a function which returns such an array for Union \".concat(config.name, \".\"));\n  return types;\n}\n\n/**\n * Enum Type Definition\n *\n * Some leaf values of requests and input values are Enums. GraphQL serializes\n * Enum values as strings, however internally Enums can be represented by any\n * kind of type, often integers.\n *\n * Example:\n *\n *     const RGBType = new GraphQLEnumType({\n *       name: 'RGB',\n *       values: {\n *         RED: { value: 0 },\n *         GREEN: { value: 1 },\n *         BLUE: { value: 2 }\n *       }\n *     });\n *\n * Note: If a value is not provided in a definition, the name of the enum value\n * will be used as its internal value.\n */\nexport var GraphQLEnumType\n/* <T> */\n= /*#__PURE__*/function () {\n  function GraphQLEnumType(config) {\n    this.name = config.name;\n    this.description = config.description;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);\n    this._values = defineEnumValues(this.name, config.values);\n    this._valueLookup = new Map(this._values.map(function (enumValue) {\n      return [enumValue.value, enumValue];\n    }));\n    this._nameLookup = keyMap(this._values, function (value) {\n      return value.name;\n    });\n    typeof config.name === 'string' || devAssert(0, 'Must provide name.');\n  }\n\n  var _proto5 = GraphQLEnumType.prototype;\n\n  _proto5.getValues = function getValues() {\n    return this._values;\n  };\n\n  _proto5.getValue = function getValue(name) {\n    return this._nameLookup[name];\n  };\n\n  _proto5.serialize = function serialize(outputValue) {\n    var enumValue = this._valueLookup.get(outputValue);\n\n    if (enumValue === undefined) {\n      throw new GraphQLError(\"Enum \\\"\".concat(this.name, \"\\\" cannot represent value: \").concat(inspect(outputValue)));\n    }\n\n    return enumValue.name;\n  };\n\n  _proto5.parseValue = function parseValue(inputValue)\n  /* T */\n  {\n    if (typeof inputValue !== 'string') {\n      var valueStr = inspect(inputValue);\n      throw new GraphQLError(\"Enum \\\"\".concat(this.name, \"\\\" cannot represent non-string value: \").concat(valueStr, \".\") + didYouMeanEnumValue(this, valueStr));\n    }\n\n    var enumValue = this.getValue(inputValue);\n\n    if (enumValue == null) {\n      throw new GraphQLError(\"Value \\\"\".concat(inputValue, \"\\\" does not exist in \\\"\").concat(this.name, \"\\\" enum.\") + didYouMeanEnumValue(this, inputValue));\n    }\n\n    return enumValue.value;\n  };\n\n  _proto5.parseLiteral = function parseLiteral(valueNode, _variables)\n  /* T */\n  {\n    // Note: variables will be resolved to a value before calling this function.\n    if (valueNode.kind !== Kind.ENUM) {\n      var valueStr = print(valueNode);\n      throw new GraphQLError(\"Enum \\\"\".concat(this.name, \"\\\" cannot represent non-enum value: \").concat(valueStr, \".\") + didYouMeanEnumValue(this, valueStr), valueNode);\n    }\n\n    var enumValue = this.getValue(valueNode.value);\n\n    if (enumValue == null) {\n      var _valueStr = print(valueNode);\n\n      throw new GraphQLError(\"Value \\\"\".concat(_valueStr, \"\\\" does not exist in \\\"\").concat(this.name, \"\\\" enum.\") + didYouMeanEnumValue(this, _valueStr), valueNode);\n    }\n\n    return enumValue.value;\n  };\n\n  _proto5.toConfig = function toConfig() {\n    var _this$extensionASTNod4;\n\n    var values = keyValMap(this.getValues(), function (value) {\n      return value.name;\n    }, function (value) {\n      return {\n        description: value.description,\n        value: value.value,\n        deprecationReason: value.deprecationReason,\n        extensions: value.extensions,\n        astNode: value.astNode\n      };\n    });\n    return {\n      name: this.name,\n      description: this.description,\n      values: values,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: (_this$extensionASTNod4 = this.extensionASTNodes) !== null && _this$extensionASTNod4 !== void 0 ? _this$extensionASTNod4 : []\n    };\n  };\n\n  _proto5.toString = function toString() {\n    return this.name;\n  } // $FlowFixMe Flow doesn't support computed properties yet\n  ;\n\n  _createClass(GraphQLEnumType, [{\n    key: SYMBOL_TO_STRING_TAG,\n    get: function get() {\n      return 'GraphQLEnumType';\n    }\n  }]);\n\n  return GraphQLEnumType;\n}();\ndefineToJSON(GraphQLEnumType);\n\nfunction didYouMeanEnumValue(enumType, unknownValueStr) {\n  var allNames = enumType.getValues().map(function (value) {\n    return value.name;\n  });\n  var suggestedValues = suggestionList(unknownValueStr, allNames);\n  return didYouMean('the enum value', suggestedValues);\n}\n\nfunction defineEnumValues(typeName, valueMap) {\n  isPlainObj(valueMap) || devAssert(0, \"\".concat(typeName, \" values must be an object with value names as keys.\"));\n  return objectEntries(valueMap).map(function (_ref2) {\n    var valueName = _ref2[0],\n        valueConfig = _ref2[1];\n    isPlainObj(valueConfig) || devAssert(0, \"\".concat(typeName, \".\").concat(valueName, \" must refer to an object with a \\\"value\\\" key \") + \"representing an internal value but got: \".concat(inspect(valueConfig), \".\"));\n    !('isDeprecated' in valueConfig) || devAssert(0, \"\".concat(typeName, \".\").concat(valueName, \" should provide \\\"deprecationReason\\\" instead of \\\"isDeprecated\\\".\"));\n    return {\n      name: valueName,\n      description: valueConfig.description,\n      value: valueConfig.value !== undefined ? valueConfig.value : valueName,\n      isDeprecated: valueConfig.deprecationReason != null,\n      deprecationReason: valueConfig.deprecationReason,\n      extensions: valueConfig.extensions && toObjMap(valueConfig.extensions),\n      astNode: valueConfig.astNode\n    };\n  });\n}\n\n/**\n * Input Object Type Definition\n *\n * An input object defines a structured collection of fields which may be\n * supplied to a field argument.\n *\n * Using `NonNull` will ensure that a value must be provided by the query\n *\n * Example:\n *\n *     const GeoPoint = new GraphQLInputObjectType({\n *       name: 'GeoPoint',\n *       fields: {\n *         lat: { type: GraphQLNonNull(GraphQLFloat) },\n *         lon: { type: GraphQLNonNull(GraphQLFloat) },\n *         alt: { type: GraphQLFloat, defaultValue: 0 },\n *       }\n *     });\n *\n */\nexport var GraphQLInputObjectType = /*#__PURE__*/function () {\n  function GraphQLInputObjectType(config) {\n    this.name = config.name;\n    this.description = config.description;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);\n    this._fields = defineInputFieldMap.bind(undefined, config);\n    typeof config.name === 'string' || devAssert(0, 'Must provide name.');\n  }\n\n  var _proto6 = GraphQLInputObjectType.prototype;\n\n  _proto6.getFields = function getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  };\n\n  _proto6.toConfig = function toConfig() {\n    var _this$extensionASTNod5;\n\n    var fields = mapValue(this.getFields(), function (field) {\n      return {\n        description: field.description,\n        type: field.type,\n        defaultValue: field.defaultValue,\n        extensions: field.extensions,\n        astNode: field.astNode\n      };\n    });\n    return {\n      name: this.name,\n      description: this.description,\n      fields: fields,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: (_this$extensionASTNod5 = this.extensionASTNodes) !== null && _this$extensionASTNod5 !== void 0 ? _this$extensionASTNod5 : []\n    };\n  };\n\n  _proto6.toString = function toString() {\n    return this.name;\n  } // $FlowFixMe Flow doesn't support computed properties yet\n  ;\n\n  _createClass(GraphQLInputObjectType, [{\n    key: SYMBOL_TO_STRING_TAG,\n    get: function get() {\n      return 'GraphQLInputObjectType';\n    }\n  }]);\n\n  return GraphQLInputObjectType;\n}();\ndefineToJSON(GraphQLInputObjectType);\n\nfunction defineInputFieldMap(config) {\n  var fieldMap = resolveThunk(config.fields);\n  isPlainObj(fieldMap) || devAssert(0, \"\".concat(config.name, \" fields must be an object with field names as keys or a function which returns such an object.\"));\n  return mapValue(fieldMap, function (fieldConfig, fieldName) {\n    !('resolve' in fieldConfig) || devAssert(0, \"\".concat(config.name, \".\").concat(fieldName, \" field has a resolve property, but Input Types cannot define resolvers.\"));\n    return {\n      name: fieldName,\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      defaultValue: fieldConfig.defaultValue,\n      extensions: fieldConfig.extensions && toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode\n    };\n  });\n}\n\nexport function isRequiredInputField(field) {\n  return isNonNullType(field.type) && field.defaultValue === undefined;\n}\n"]},"metadata":{},"sourceType":"module"}