{"ast":null,"code":"var _jsxFileName = \"/Users/insungsong/Documents/prismagram-frontend/src/Routes/Search/SearchContainer.js\";\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport SearchPresenter from \"./SearchPresenter\";\nimport { useQuery } from \"react-apollo-hooks\";\nimport { SEARCH } from \"./SearchQueries\";\nexport default withRouter(({\n  location: {\n    search\n  }\n}) => {\n  const term = search.split(\"=\")[1];\n  const {\n    data,\n    loading\n  } = useQuery(SEARCH, {\n    skip: term === undefined,\n    variables: {\n      term\n    }\n  });\n  console.log(data);\n  return /*#__PURE__*/React.createElement(SearchPresenter, {\n    searchTerm: term,\n    loading: loading,\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 10\n    }\n  });\n});","map":{"version":3,"sources":["/Users/insungsong/Documents/prismagram-frontend/src/Routes/Search/SearchContainer.js"],"names":["React","withRouter","SearchPresenter","useQuery","SEARCH","location","search","term","split","data","loading","skip","undefined","variables","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AAEA,eAAeH,UAAU,CAAC,CAAC;AAAEI,EAAAA,QAAQ,EAAE;AAAEC,IAAAA;AAAF;AAAZ,CAAD,KAA8B;AACtD,QAAMC,IAAI,GAAGD,MAAM,CAACE,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAb;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBP,QAAQ,CAACC,MAAD,EAAS;AACzCO,IAAAA,IAAI,EAAEJ,IAAI,KAAKK,SAD0B;AAEzCC,IAAAA,SAAS,EAAE;AAAEN,MAAAA;AAAF;AAF8B,GAAT,CAAlC;AAKAO,EAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AAEA,sBAAO,oBAAC,eAAD;AAAiB,IAAA,UAAU,EAAEF,IAA7B;AAAmC,IAAA,OAAO,EAAEG,OAA5C;AAAqD,IAAA,IAAI,EAAED,IAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAVwB,CAAzB","sourcesContent":["import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport SearchPresenter from \"./SearchPresenter\";\nimport { useQuery } from \"react-apollo-hooks\";\nimport { SEARCH } from \"./SearchQueries\";\n\nexport default withRouter(({ location: { search } }) => {\n  const term = search.split(\"=\")[1];\n  const { data, loading } = useQuery(SEARCH, {\n    skip: term === undefined,\n    variables: { term }\n  });\n\n  console.log(data);\n\n  return <SearchPresenter searchTerm={term} loading={loading} data={data} />;\n});\n"]},"metadata":{},"sourceType":"module"}