{"ast":null,"code":"var _jsxFileName = \"/Users/insungsong/Documents/prismagram-frontend/src/Routes/OneOfPost/OneOfPostContainer.js\";\nimport React from \"react\";\nimport OneOfPostPresenter from \"./OneOfPostPresenter\";\nimport { withRouter } from \"react-router-dom\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"react-apollo-hooks\";\nimport Loader from \"../../Components/Loader\";\nconst GET_SEE_FEED = gql`\n  {\n    seeFeed {\n      id\n      location\n      caption\n      user {\n        id\n        avatar\n        username\n      }\n      files {\n        id\n        url\n      }\n      likeCount\n      isLiked\n      comments {\n        id\n        text\n        user {\n          id\n          username\n        }\n      }\n      createdAt\n    }\n  }\n`;\nexport default withRouter(({\n  match: {\n    params: {\n      id\n    }\n  }\n}) => {\n  const {\n    data,\n    loading\n  } = useQuery(GET_SEE_FEED);\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 14\n      }\n    });\n  } else {\n    return data.seeFeed.map(feed => {\n      if (id === feed.id) {\n        return /*#__PURE__*/React.createElement(OneOfPostPresenter, {\n          id: feed.id,\n          key: feed.id,\n          username: feed.user.username,\n          avatar: feed.user.avatar,\n          location: feed.location,\n          isLiked: feed.isLiked,\n          files: feed.files,\n          likeCount: feed.likeCount,\n          comments: feed.user.comments,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }\n        });\n      }\n    });\n  }\n});","map":{"version":3,"sources":["/Users/insungsong/Documents/prismagram-frontend/src/Routes/OneOfPost/OneOfPostContainer.js"],"names":["React","OneOfPostPresenter","withRouter","gql","useQuery","Loader","GET_SEE_FEED","match","params","id","data","loading","seeFeed","map","feed","user","username","avatar","location","isLiked","files","likeCount","comments"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,MAAMC,YAAY,GAAGH,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAzB;AA8BA,eAAeD,UAAU,CACvB,CAAC;AACCK,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAE;AAAEC,MAAAA;AAAF;AADH;AADR,CAAD,KAIM;AACJ,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBP,QAAQ,CAACE,YAAD,CAAlC;;AAEA,MAAIK,OAAJ,EAAa;AACX,wBAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFD,MAEO;AACL,WAAOD,IAAI,CAACE,OAAL,CAAaC,GAAb,CAAkBC,IAAD,IAAU;AAChC,UAAIL,EAAE,KAAKK,IAAI,CAACL,EAAhB,EAAoB;AAClB,4BACE,oBAAC,kBAAD;AACE,UAAA,EAAE,EAAEK,IAAI,CAACL,EADX;AAEE,UAAA,GAAG,EAAEK,IAAI,CAACL,EAFZ;AAGE,UAAA,QAAQ,EAAEK,IAAI,CAACC,IAAL,CAAUC,QAHtB;AAIE,UAAA,MAAM,EAAEF,IAAI,CAACC,IAAL,CAAUE,MAJpB;AAKE,UAAA,QAAQ,EAAEH,IAAI,CAACI,QALjB;AAME,UAAA,OAAO,EAAEJ,IAAI,CAACK,OANhB;AAOE,UAAA,KAAK,EAAEL,IAAI,CAACM,KAPd;AAQE,UAAA,SAAS,EAAEN,IAAI,CAACO,SARlB;AASE,UAAA,QAAQ,EAAEP,IAAI,CAACC,IAAL,CAAUO,QATtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;AACF,KAhBM,CAAP;AAiBD;AACF,CA7BsB,CAAzB","sourcesContent":["import React from \"react\";\nimport OneOfPostPresenter from \"./OneOfPostPresenter\";\nimport { withRouter } from \"react-router-dom\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from \"react-apollo-hooks\";\nimport Loader from \"../../Components/Loader\";\n\nconst GET_SEE_FEED = gql`\n  {\n    seeFeed {\n      id\n      location\n      caption\n      user {\n        id\n        avatar\n        username\n      }\n      files {\n        id\n        url\n      }\n      likeCount\n      isLiked\n      comments {\n        id\n        text\n        user {\n          id\n          username\n        }\n      }\n      createdAt\n    }\n  }\n`;\n\nexport default withRouter(\n  ({\n    match: {\n      params: { id }\n    }\n  }) => {\n    const { data, loading } = useQuery(GET_SEE_FEED);\n\n    if (loading) {\n      return <Loader />;\n    } else {\n      return data.seeFeed.map((feed) => {\n        if (id === feed.id) {\n          return (\n            <OneOfPostPresenter\n              id={feed.id}\n              key={feed.id}\n              username={feed.user.username}\n              avatar={feed.user.avatar}\n              location={feed.location}\n              isLiked={feed.isLiked}\n              files={feed.files}\n              likeCount={feed.likeCount}\n              comments={feed.user.comments}\n            />\n          );\n        }\n      });\n    }\n  }\n);\n"]},"metadata":{},"sourceType":"module"}